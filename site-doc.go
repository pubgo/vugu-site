package main

// DO NOT EDIT: This file was generated by vugu. Please regenerate instead of editing or add additional code in a separate file.

import "fmt"
import "reflect"
import "github.com/vugu/vugu"

var _ vugu.ComponentType = (*SiteDoc)(nil)

func (comp *SiteDoc) BuildVDOM(dataI interface{}) (vdom *vugu.VGNode, css *vugu.VGNode, reterr error) {
	data := dataI.(*SiteDocData)
	_ = data
	_ = fmt.Sprint
	_ = reflect.Value{}
	event := vugu.DOMEventStub
	_ = event
	var n *vugu.VGNode
	n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "section", DataAtom: vugu.VGAtom(354311), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "site-doc"}}}
	vdom = n
	{
		parent := n
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " hero ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "section", DataAtom: vugu.VGAtom(354311), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "hero bg-blue"}}}
		parent.AppendChild(n)
		{
			parent := n
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
			n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "container"}}}
			parent.AppendChild(n)
			{
				parent := n
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
				n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "row"}}}
				parent.AppendChild(n)
				{
					parent := n
					n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
					parent.AppendChild(n)
					n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-md-8 text-white mb-3"}}}
					parent.AppendChild(n)
					{
						parent := n
						n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
						n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h1", DataAtom: vugu.VGAtom(89090), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "h2 pb-1 pt-2"}}}
						parent.AppendChild(n)
						n.InnerHTML = fmt.Sprint(allPages.FindByPathOrEmpty(data.Router.Path()).LongTitle)
						n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
						n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "nav", DataAtom: vugu.VGAtom(4867), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "aria-label", Val: "breadcrumb"}}}
						parent.AppendChild(n)
						{
							parent := n
							n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
							parent.AppendChild(n)
							n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "ol", DataAtom: vugu.VGAtom(79618), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "breadcrumb breadcrumb-minimal"}}}
							parent.AppendChild(n)
							{
								parent := n
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "breadcrumb-item"}}}
								parent.AppendChild(n)
								{
									parent := n
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "/"}}}
									parent.AppendChild(n)
									// @click = { data.Router.BrowseTo("/", event) }
									{
										var i_ interface{} = data.Router
										idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
										var i2_ interface{} = data.Router.BrowseTo
										i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
										n.SetDOMEventHandler("click", vugu.DOMEventHandler{
											ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
											Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
											Args:                  []interface{}{"/", event},
										})
									}
									if false {
										// force compiler to check arguments for type safety
										data.Router.BrowseTo("/", event)
									}
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Home", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "breadcrumb-item"}}}
								parent.AppendChild(n)
								{
									parent := n
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "/doc"}}}
									parent.AppendChild(n)
									// @click = { data.Router.BrowseTo("/doc", event) }
									{
										var i_ interface{} = data.Router
										idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
										var i2_ interface{} = data.Router.BrowseTo
										i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
										n.SetDOMEventHandler("click", vugu.DOMEventHandler{
											ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
											Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
											Args:                  []interface{}{"/doc", event},
										})
									}
									if false {
										// force compiler to check arguments for type safety
										data.Router.BrowseTo("/doc", event)
									}
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Doc", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if allPages.FindByPathOrEmpty(data.Router.Path()).Path != "/doc" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "breadcrumb-item active"}}}
									parent.AppendChild(n)
									n.InnerHTML = fmt.Sprint(allPages.FindByPathOrEmpty(data.Router.Path()).ShortTitle)
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
							}
							n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
							parent.AppendChild(n)
						}
						n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
					}
					n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
					parent.AppendChild(n)
				}
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
			}
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " / hero ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " sidebar layout ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "section", DataAtom: vugu.VGAtom(354311), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: ""}}}
		parent.AppendChild(n)
		{
			parent := n
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
			n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "container overlay-item-top"}}}
			parent.AppendChild(n)
			{
				parent := n
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
				n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "row"}}}
				parent.AppendChild(n)
				{
					parent := n
					n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
					parent.AppendChild(n)
					n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col"}}}
					parent.AppendChild(n)
					{
						parent := n
						n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
						n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "content boxed"}}}
						parent.AppendChild(n)
						{
							parent := n
							n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
							parent.AppendChild(n)
							n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "row separated"}}}
							parent.AppendChild(n)
							{
								parent := n
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " content ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if allPages.FindByPathOrEmpty(data.Router.Path()).Path == "/doc" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "article", DataAtom: vugu.VGAtom(261127), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-md-8 content-body"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Vugu is Go library which makes it easy to write web user interfaces in Go.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "The basic idea is as follows:", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "ul", DataAtom: vugu.VGAtom(42754), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "You write UI components in .vugu files", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ". These files are similar\n                                        to UI components you might see in\n                                        JavaScript frameworks (e.g. .vue files). However, they contain no JavaScript and\n                                        instead have Go language expressions for\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "if", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ", ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "for", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " and other such functionality.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "br", DataAtom: vugu.VGAtom(514), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\u00a0\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Each .vugu file is converted to a corresponding .go file.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " There\n                                        is a development server in the Vugu project\n                                        which can do this for you automatically on page reload, or the\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "vugugen", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " command line tool can be used to integrate\n                                        with ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "go generate", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ". The code generation also attempts to provide\n                                        sensible defaults where needed so your .vugu\n                                        files contain as little boilerplate as possible, while still allowing extensive\n                                        customization if desired.\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "br", DataAtom: vugu.VGAtom(514), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\u00a0\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Your project is compiled to a WebAssembly module and run in the\n                                            browser.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " Again, the development server makes this easy to\n                                        do when starting a project. As your project evolves and you need to customize\n                                        parts of this process you can easily do so.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "br", DataAtom: vugu.VGAtom(514), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\u00a0\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "The Vugu library", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " (package: ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://github.com/vugu/vugu"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "github.com/vugu/vugu", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ")\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "provides functionality to efficiently synchronize HTML DOM", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " on a\n                                        web page according to the markup\n                                        in your .vugu files. Features like attaching DOM event handlers (click, etc.)\n                                        and breaking large pages up into components\n                                        are supported.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if allPages.FindByPathOrEmpty(data.Router.Path()).Path == "/doc/start" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "article", DataAtom: vugu.VGAtom(261127), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-md-8 content-body"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    Let's make a basic working Vugu application that runs in your browser. It\n                                    only takes three small files to start. Make sure you have at least\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://golang.org/dl/"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Go", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " 1.13", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    installed.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "section", DataAtom: vugu.VGAtom(354311), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "id", Val: "section-1"}}}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " <h2 class=\"section-title-2\">Quick Start <a data-scroll href=\"#section-2\" class=\"anchor\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Copy URL\"><i class=\"icon-hash\"></i></a></h2> ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "ol", DataAtom: vugu.VGAtom(79618), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "step-list"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															{
																parent := n
																n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Create a new empty folder anywhere you like.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
																parent.AppendChild(n)
															}
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " We'll\n                                                    use the name ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															{
																parent := n
																n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "testapp", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
																parent.AppendChild(n)
															}
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " as an example.\n                                                    Each file you create will be directly in this folder, no subfolders\n                                                    are needed.\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															{
																parent := n
																n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Create", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
																parent.AppendChild(n)
															}
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															{
																parent := n
																n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "go.mod", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
																parent.AppendChild(n)
															}
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " which specifies a\n                                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://github.com/golang/go/wiki/Modules#gomod"}}}
															parent.AppendChild(n)
															{
																parent := n
																n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Go\n                                                        module", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
																parent.AppendChild(n)
															}
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " name. To get started, you can\n                                                    pick any name you like as a placeholder following the pattern shown.\n                                                    For example:", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "pre", DataAtom: vugu.VGAtom(290819), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															{
																parent := n
																n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "module example.org/someone/testapp\n", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
																parent.AppendChild(n)
															}
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															{
																parent := n
																n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Create a Vugu component file.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
																parent.AppendChild(n)
															}
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                    We'll put a click handler and an element that toggles to demonstrate\n                                                    some basic functionality.\n                                                    This first component should be called ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															{
																parent := n
																n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "root.vugu", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
																parent.AppendChild(n)
															}
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ":\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n.InnerHTML = fmt.Sprint(showCode("html", `<div class="my-first-vugu-comp">
    <button @click="data.Toggle()">Test</button>
    <div vg-if="data.Show">I am here!</div>
</div>

<style>
.my-first-vugu-comp { background: #eee; }
</style>

<script type="application/x-go">
type RootData struct { Show bool }
func (data *RootData) Toggle() { data.Show = !data.Show }
</script>`))
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: "\n                                                <pre><code><div class=\"my-first-vugu-comp\">\n                          <button @click=\"data.Toggle()\">Test</button>\n                          <div vg-if=\"data.Show\">I am here!</div>\n                      </div>\n\n                      <style>\n                      .my-first-vugu-comp { background: #eee; }\n                      </style>\n\n                      <script type=\"application/x-go\">\n                      type RootData struct { Show bool }\n                      func (data *RootData) Toggle() { data.Show = !data.Show }\n                      </script>\n                      </code></pre>", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															{
																parent := n
																n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Create a development server file.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
																parent.AppendChild(n)
															}
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " Note that this\n                                                    does not get compiled to WebAssembly.\n                                                    This is a server which serves your program up to the browser.\n                                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															{
																parent := n
																n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "devserver.go", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
																parent.AppendChild(n)
															}
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ":\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n.InnerHTML = fmt.Sprint(showCode("go", `// +build ignore

package main

import (
	"log"
	"net/http"
	"os"

	"github.com/vugu/vugu/simplehttp"
)

func main() {
	wd, _ := os.Getwd()
	l := "127.0.0.1:8844"
	log.Printf("Starting HTTP Server at %q", l)
	h := simplehttp.New(wd, true)
	// include a CSS file
	// simplehttp.DefaultStaticData["CSSFiles"] = []string{ "/my/file.css" }
	log.Fatal(http.ListenAndServe(l, h))
}
`))
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " </code></pre> ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															{
																parent := n
																n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Run the server", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
																parent.AppendChild(n)
															}
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".\n                                                    While in the same directory, run the command ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															{
																parent := n
																n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "go run\n                                                        devserver.go", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
																parent.AppendChild(n)
															}
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "After a few brief moments, the server should start. It works the same\n                                                    on\n                                                    Windows, Linux or Mac.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															{
																parent := n
																n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Browse to it", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
																parent.AppendChild(n)
															}
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ": ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "http://127.0.0.1:8844/"}}}
															parent.AppendChild(n)
															{
																parent := n
																n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "http://127.0.0.1:8844/", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
																parent.AppendChild(n)
															}
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
														}
													}
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Marvel at the wonder you have created.\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
														}
													}
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if allPages.FindByPathOrEmpty(data.Router.Path()).Path == "/doc/files" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "article", DataAtom: vugu.VGAtom(261127), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-md-8 content-body"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Vugu files have three sections: Markup, Style and Code", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Markup", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " is the HTML element which is the display portion of your\n                                    file.\n                                    More often than not it is a simple div tag, such as: ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("html", `<div class="some-name">
  <!-- ... -->
</div>`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    It is displayed at the appropriate location in the document. For the\n                                    root component (by default named \"root\" and living in root.vugu), this is usually\n                                    immediately\n                                    inside the ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "<body>", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " tag of the page. The element can be of any type\n                                    except\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "<script>", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " or ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "<style>", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Style", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " is a regular ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "<style>", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " tag and includes CSS\n                                    which is\n                                    output with this component. To avoid collisions, styles should be appropriately\n                                    prefixed (corresponding to an ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "id", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " or ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "class", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " on the top level\n                                    markup\n                                    element above).\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Code", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " is Go language code which is copied verbatim into the final\n                                    .go file.\n                                    It is put into a script tag with a specific content type, like so:", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("html", `<script type="application/x-go">
// Go code here
</script>`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    Note that JavaScript is not supported, only Go code. There can be only one.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if allPages.FindByPathOrEmpty(data.Router.Path()).Path == "/doc/files/markup" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "article", DataAtom: vugu.VGAtom(261127), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-md-8 content-body"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    The Markup section is an element which has the HTML that is displayed for this file\n                                    (each file is a \"component\",\n                                    following the parlance of other UI libraries).\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "In addition to regular HTML, some specific attributes have special meaning in Vugu\n                                    and allow you to introduce\n                                    logic into your component's display.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "alert alert-warning"}, vugu.VGAttribute{Namespace: "", Key: "role", Val: "alert"}}}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "i", DataAtom: vugu.VGAtom(1537), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "icon-alert-circle"}}}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h4", DataAtom: vugu.VGAtom(214274), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "fs-22"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Tip", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Component files are parsed first using a regular HTML parser, before any Go\n                                        expressions are considered.\n                                        As such, using single quotes when writing attribute values can help with HTML\n                                        escaping issues.\n                                        For example, you can write ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "<div vg-if='myvar == \"myval\"'>", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " or\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "<div vg-if=\"myvar == &#34;myval&#34;\">", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ", but the former\n                                        is easier to read. ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h3", DataAtom: vugu.VGAtom(199938), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Conditionals with ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "vg-if", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    You can choose a condition for an element to be displayed using ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "vg-if='condition'", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".\n                                    The\n                                    condition is regular Go code and during code generation is put directly between\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "nobr", DataAtom: vugu.VGAtom(14084), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "if", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " and ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "{", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    in the resulting .go file. While the expression itself can be any valid Go code for\n                                    an if statement,\n                                    a common case is to reference a member variable of your\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "/doc/components"}}}
											parent.AppendChild(n)
											// @click = { data.Router.BrowseTo("/doc/components", event) }
											{
												var i_ interface{} = data.Router
												idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
												var i2_ interface{} = data.Router.BrowseTo
												i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
												n.SetDOMEventHandler("click", vugu.DOMEventHandler{
													ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
													Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
													Args:                  []interface{}{"/doc/components", event},
												})
											}
											if false {
												// force compiler to check arguments for type safety
												data.Router.BrowseTo("/doc/components", event)
											}
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Component", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "'s\n                                    Data struct.\n                                    For example:\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("html", `<div>
    <p vg-if='data.ShowText'>
        Conditional text here.
    </p>
</div>

<script type="application/x-go">
type RootData struct { // component data for "root"
    ShowText bool
}
</script>`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h3", DataAtom: vugu.VGAtom(199938), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Loops with ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "vg-for", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Loops correspond directly to ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "for", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " blocks in Go code. All forms of loops\n                                    are supported\n                                    including the ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "init; condition; post", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " syntax as well as\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "range", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " expressions.\n                                    For example:\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("html", `<div>
    <p vg-for='i := 0; i < 10; i++'>
        <div vg-html="i"></div>
    </p>
</div>`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("html", `<div>
    <p vg-for='_, item := range data.Items'>
        <div vg-html="item"></div>
    </p>
</div>

<script type="application/x-go">
type RootData struct { // component data for "root"
    Items []string
}
</script>`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Note that the vg-html attribute outputs the value as HTML, using\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "fmt.Sprint()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ", see below.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    As a special case and for convenience, if the expression contains no whitespace it\n                                    will be expanded to\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "for key, value := range expr { _, _ = key, value; ...", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ". Example:\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("html", `<div>
    <p vg-for='data.Items'>
        <div>
          Key: <span vg-html="key"></span>
          Value: <span vg-html="value"></span>
        </div>
    </p>
</div>

<script type="application/x-go">
type RootData struct { // component data for "root"
    Items []string
}
</script>`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h3", DataAtom: vugu.VGAtom(199938), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Raw HTML with ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "vg-html", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "The vg-html attribute is used to output an expression as HTML into the contents of an\n                                    element.\n                                    (It corresponds to the ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "innerHTML", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    property.)\n                                    The expression converted to a string using\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://golang.org/pkg/fmt/#Sprint"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "fmt.Sprint()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".\n                                    Example:\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("html", `<div>
    <p vg-html='"<b>an HTML string</b>"'>
    <p vg-html='123'> <!-- will be output according to fmt.Sprint rules -->
    <p vg-html='html.EscapeString("escaping & arbitrary text is easy like so")'>
</div>

<script type="application/x-go">
import "html"
</script>`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    You may use variable names declared in earlier constructs (such as ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "key", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    or ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "value", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " from a for/range loop).\n                                    Regular Go variable scoping rules apply, where each nested DOM element is equivalent\n                                    to a Go ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "{", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " code block ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "}", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h3", DataAtom: vugu.VGAtom(199938), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Dynamic Attributes with ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ":", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    The values of HTML attributes can be made dynamic and accept Go expressions.\n                                    Dynamically changing attribute values has many uses such as applying CSS dynamically\n                                    styles with the class attribute.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("html", `<div>
    <p :style='"background:"+data.BgColor'></p>
</div>

<script type="application/x-go">
type RootData struct {
  BgColor string // e.g. "blue"
}
</script>`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    You may use variable names declared in earlier constructs (such as ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "key", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    or ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "value", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " from a for/range loop).\n                                    Regular Go variable scoping rules apply, where each nested DOM element is equivalent\n                                    to a Go ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "{", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " code block ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "}", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Note that in addition to the above use, dynamic attributes are frequently used in\n                                    conjuction with\n                                    components, where the attributes\n                                    become properties that are passed into a component when it is instantiated. In this\n                                    case,\n                                    the attributes are not converted to strings but are kept as regular Go values (store\n                                    as ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "interface{}", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "). See the\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "/doc/components"}}}
											parent.AppendChild(n)
											// @click = { data.Router.BrowseTo("/doc/components", event) }
											{
												var i_ interface{} = data.Router
												idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
												var i2_ interface{} = data.Router.BrowseTo
												i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
												n.SetDOMEventHandler("click", vugu.DOMEventHandler{
													ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
													Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
													Args:                  []interface{}{"/doc/components", event},
												})
											}
											if false {
												// force compiler to check arguments for type safety
												data.Router.BrowseTo("/doc/components", event)
											}
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Components", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    page for more info.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h3", DataAtom: vugu.VGAtom(199938), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "DOM Events with ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "@", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Event handlers can be attached to HTML elements (à la\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "addEventListener", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ")\n                                    using special attributes prefixed with an @ symbol.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "The attribute name after the @ indicates the event name, e.g. \"click\". The attribute\n                                    value must be a Go function/method\n                                    call. Other Go statements are not currently allowed. The arguments to the function\n                                    call can be anything valid in Go,\n                                    including literals.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Note that these values must hash properly with\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#ComputeHash"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "ComputeHash()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ",\n                                    as this is needed by Vugu\n                                    to keep track of its events internally. Most primitive types that just store data\n                                    are fine, but please, no channels.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    You may use variable names declared in earlier constructs (such as ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "key", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    or ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "value", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " from a for/range loop).\n                                    Regular Go variable scoping rules apply, where each nested DOM element is equivalent\n                                    to a Go ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "{", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " code block ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "}", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".\n                                    The special variable ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "event", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " which is of type\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#DOMEvent"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "*vugu.DOMEvent", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    can be used a placeholder and is replaced when the method is invoked with an\n                                    appropriate event object.\n                                    See ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "/doc/dom-events"}}}
											parent.AppendChild(n)
											// @click = { data.Router.BrowseTo("/doc/dom-events", event) }
											{
												var i_ interface{} = data.Router
												idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
												var i2_ interface{} = data.Router.BrowseTo
												i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
												n.SetDOMEventHandler("click", vugu.DOMEventHandler{
													ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
													Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
													Args:                  []interface{}{"/doc/dom-events", event},
												})
											}
											if false {
												// force compiler to check arguments for type safety
												data.Router.BrowseTo("/doc/dom-events", event)
											}
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "DOM Events", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " for\n                                    more info.\n                                    Example:\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("html", `<div>
    <div vg-if='data.Show'>I am here!</div>
    <button @click='data.Toggle()'>Toggle me Silly</button>
</div>

<script type="application/x-go">
func (data *RootData) Toggle() { data.Show = !data.Show }
type RootData struct {
  Show bool
}
</script>`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h3", DataAtom: vugu.VGAtom(199938), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Special Variable Names", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    Several variable names have special meaning and are useful when writing .vugu files:\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "ul", DataAtom: vugu.VGAtom(42754), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "data", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " - Refers to the instance of your Component.\n                                        It is typically\n                                        a struct pointer. This is the proper place to house the state of your component.\n                                        By default this is an empty struct but it is common to create your own struct\n                                        with\n                                        the data you need on it. See more at ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "/doc/components"}}}
												parent.AppendChild(n)
												// @click = { data.Router.BrowseTo("/doc/components", event) }
												{
													var i_ interface{} = data.Router
													idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
													var i2_ interface{} = data.Router.BrowseTo
													i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
													n.SetDOMEventHandler("click", vugu.DOMEventHandler{
														ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
														Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
														Args:                  []interface{}{"/doc/components", event},
													})
												}
												if false {
													// force compiler to check arguments for type safety
													data.Router.BrowseTo("/doc/components", event)
												}
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Components", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "comp", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " - Refers to the component type. Unless you write something\n                                        specific for this it will be an empty struct. However it can be useful if you\n                                        need to\n                                        store configuration info that is determined at app startup and is the same for\n                                        each\n                                        instance of a component.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "event", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " - This is a placeholder for a\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#DOMEvent"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "*vugu.DOMEvent", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        instance that is\n                                        created when a DOM event is triggered and your handler is called. This also\n                                        provides\n                                        some other needed functionality such as the\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#EventEnv"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "EventEnv", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ",\n                                        which is important for synchronizing\n                                        goroutines that need to update data after an event completes. See more at\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "/doc/dom-events"}}}
												parent.AppendChild(n)
												// @click = { data.Router.BrowseTo("/doc/dom-events", event) }
												{
													var i_ interface{} = data.Router
													idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
													var i2_ interface{} = data.Router.BrowseTo
													i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
													n.SetDOMEventHandler("click", vugu.DOMEventHandler{
														ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
														Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
														Args:                  []interface{}{"/doc/dom-events", event},
													})
												}
												if false {
													// force compiler to check arguments for type safety
													data.Router.BrowseTo("/doc/dom-events", event)
												}
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "DOM Events", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "key", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " and ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "value", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " - See section covering vg-for above.\n                                        These are the\n                                        default names used for implied range expressions.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Please note that variables that your code declares, e.g. in a vg-for loop, should not\n                                    end with an underscore in order\n                                    to avoid conflicting with generated code.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if allPages.FindByPathOrEmpty(data.Router.Path()).Path == "/doc/files/style" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "article", DataAtom: vugu.VGAtom(261127), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-md-8 content-body"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Style blocks are simply a way to express CSS that corresponds to your component and\n                                    is output\n                                    along with your component markup. Example:", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("html", `<div class="some-component-here">
    <strong>"Fashions fade, style is eternal."</strong> —Yves Saint Laurent
</div>

<style>
.some-component-here strong {
  color: #7c5a9e;
}
</style>`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    A few words of widsom and caution regarding style blocks:\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "ul", DataAtom: vugu.VGAtom(42754), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        It is good practice to ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "prefix your styles", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " and make them\n                                        correspond to your component's main HTML element -\n                                        either a ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "class", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " or ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "id", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ". In the example above you\n                                        can see we use ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".some-component-here", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        as a prefix to avoid style collisions. Generally, using the exact component name\n                                        (the name of the .vugu file minus the extension)\n                                        is a good way to go.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Styles are deduplicated", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " as literal strings of the entire\n                                        contents of the ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "<style>", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " tag,\n                                        so only one of the same block of styles is ever output.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Styles are inserted in one place at the top of the root\n                                            component", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " and in the order that components are\n                                        rendered. This usually produces the right effect but it's worth knowing when you\n                                        are debugging style issues.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "You probably do ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "not want to use @import to load external style\n                                            sheets.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        If your component is shown and then\n                                        hidden and shown again it will cause the import to be removed from the page and\n                                        then re-added and\n                                        most likely your browser will load the stylesheet again. For styles which should\n                                        always be\n                                        present, it is better to add them to the overall page markup outside of the root\n                                        component. ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " TODO link to where this is documented ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        Go expressions or other ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "dynamic elements are not currently supported in\n                                            styles", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".\n                                        It is entirely possible such functionality will be added in the future if it can\n                                        be made to work cleanly.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if allPages.FindByPathOrEmpty(data.Router.Path()).Path == "/doc/files/code" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "article", DataAtom: vugu.VGAtom(261127), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-md-8 content-body"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    Go code can be included in your component with in a\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "nobr", DataAtom: vugu.VGAtom(14084), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "<script type=\"application/x-go\">", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    tag.\n                                    This code is copied from your .vugu file into the resulting code generated .go file.\n                                    It is the appropriate place to include structs, methods and imports needed by\n                                    your component.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "alert alert-warning"}, vugu.VGAttribute{Namespace: "", Key: "role", Val: "alert"}}}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "i", DataAtom: vugu.VGAtom(1537), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "icon-alert-circle"}}}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h4", DataAtom: vugu.VGAtom(214274), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "fs-22"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Tip: Script Tag Alternative", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Because Go packages impose few limits on which code may be put into which file,\n                                        you are not required to use a\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "nobr", DataAtom: vugu.VGAtom(14084), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "<script type=\"application/x-go\">", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        tag and it works just as well to place this code in a separate file.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "If you want to do this, the suggested naming convention is\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "nobr", DataAtom: vugu.VGAtom(14084), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "component-name-", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "em", DataAtom: vugu.VGAtom(28162), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "data", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".go", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "For ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "root.vugu", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ", you could place your corresponding Go code in\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "nobr", DataAtom: vugu.VGAtom(14084), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "root-data.go", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "For ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "some-component.vugu", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " you could place your corresponding Go\n                                        code in\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "nobr", DataAtom: vugu.VGAtom(14084), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "some-component-data.go", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    For every component there are two structs which must be defined.\n                                    One which implements\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#ComponentType"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "ComponentType", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ",\n                                    and one which is the \"data\"\n                                    for your component.\n                                    If you do not define them\n                                    in your Go code block the code generator will output empty structs\n                                    and missing methods for you (as a convenience\n                                    to make it easy to rapidly create simple components).\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    Most components will use the Go code block to, aside from adding import statements,\n                                    define the data struct for their component and add any needed methods to it.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    In writing Go code blocks in your components, it is important to observe the\n                                    following\n                                    naming conventions:\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "ul", DataAtom: vugu.VGAtom(42754), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "component-name.vugu", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " results in a code generated\n                                        file called ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "component-name.go", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " in the same directory\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "component-name.vugu", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " implies a struct called\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "ComponentName", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " which corresponds to the type of the component,\n                                        and a struct called ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "ComponentNameData", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ", which is the data for\n                                        each instance of the component.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "br", DataAtom: vugu.VGAtom(514), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\u00a0\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "ComponentNameData", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " is normally where you want to add data and\n                                        methods.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "br", DataAtom: vugu.VGAtom(514), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\u00a0\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    Let's take a look at a working example of a component that makes more use of the Go\n                                    code\n                                    section and see all of this work together. This example shows a button which, when\n                                    clicked,\n                                    will cause the browser to fetch data from the\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://www.coindesk.com/api"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "CoinDesk Bitcoin Price Index\n                                        API", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ", parse\n                                    the result, and display it.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "root.vugu:", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("html", `<div class="demo">
    <div vg-if='data.isLoading'>Loading...</div>
    <div vg-if='len(data.bpi.BPI) > 0'>
        <div>Updated: <span vg-html='data.bpi.Time.Updated'></span></div>
        <ul>
            <li vg-for='data.bpi.BPI'>
                <span vg-html='key'></span> <span vg-html='fmt.Sprint(value.Symbol, value.RateFloat)'></span>
            </li>
        </ul>
    </div>
    <button @click="data.HandleClick(event)">Fetch Bitcoin Price Index</button>
</div>

<script type="application/x-go">
import "encoding/json"
import "net/http"
import "log"

type RootData struct {
    bpi bpi
    isLoading bool
}

type bpi struct {
    Time struct { Updated string `+"`"+`json:"updated"`+"`"+` } `+"`"+`json:"time"`+"`"+`
    BPI map[string]struct { Code string `+"`"+`json:"code"`+"`"+`; Symbol string  `+"`"+`json:"symbol"`+"`"+`; RateFloat float64 `+"`"+`json:"rate_float"`+"`"+` } `+"`"+`json:"bpi"`+"`"+`
}

func (data *RootData) HandleClick(event *vugu.DOMEvent) {

    data.bpi = bpi{}

    ee := event.EventEnv()

    go func() {

        ee.Lock()
        data.isLoading = true
        ee.UnlockRender()
        
        res, err := http.Get("https://api.coindesk.com/v1/bpi/currentprice.json")
        if err != nil {
            log.Printf("Error fetch()ing: %v", err)
            return
        }
        defer res.Body.Close()

        var newb bpi
        err = json.NewDecoder(res.Body).Decode(&newb)
        if err != nil {
            log.Printf("Error JSON decoding: %v", err)
            return
        }

        ee.Lock()
        defer ee.UnlockRender()
        data.bpi = newb
        data.isLoading = false

    }()
}

</script>`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "ul", DataAtom: vugu.VGAtom(42754), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pt-2"}}}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Since this example lives in root.vugu, the data struct is called\n                                            RootData", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".\n                                        (And for example in a component in file sample-comp.vugu, this would be\n                                        SampleCompData.)\n                                        This is where a component's instance data is stored.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "On RootData we have a variable called isLoading", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " of type ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "bool", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".\n                                        This provides a simple way to ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "vg-if", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " a div, which then shows only\n                                        during loading.\n                                        (More below on how ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "isLoading", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " is updated.)\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "A struct ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "bpi", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " is defined", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " for the data we're getting\n                                        from the API call. This makes it easy\n                                        to read and display. Remember, components are converted to ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "regular Go\n                                            code", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ", and\n                                        heeding the fact that your code runs in the browser, many of the usual\n                                        approaches you would do\n                                        in any Go program apply here.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "We're looping over one of the members of ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "bpi", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " using\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "vg-for", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " in our markup to display each individual\n                                        item returned.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "A handler for the DOM click event", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " is enabled with\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "@click", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ". Notice that the method\n                                        it calls is a member of ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "data", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " (of type ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "*RootData", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "). This\n                                        call does not\n                                        have to be to a methd on ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "data", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ", but this is the most common case.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "When the click handler is invoked, we start a goroutine", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " to\n                                        fetch data from the server in the background.\n                                        It is important we don't block here and return from this method quickly.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "The EventEnv is used to synchronize access", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " to data, and works\n                                        well from goroutines. When we modify\n                                        any information on ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "data", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " or that could potentially have concurrency\n                                        issues, you can use ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "EventEnv.Lock()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        to get an exclusive lock, and ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "EventEnv.UnlockRender()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " to release\n                                        the lock and tell render loop that the page needs\n                                        to be updated.\n                                        See ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "/doc/dom-events"}}}
												parent.AppendChild(n)
												// @click = { data.Router.BrowseTo("/doc/dom-events", event) }
												{
													var i_ interface{} = data.Router
													idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
													var i2_ interface{} = data.Router.BrowseTo
													i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
													n.SetDOMEventHandler("click", vugu.DOMEventHandler{
														ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
														Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
														Args:                  []interface{}{"/doc/dom-events", event},
													})
												}
												if false {
													// force compiler to check arguments for type safety
													data.Router.BrowseTo("/doc/dom-events", event)
												}
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "DOM Events", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        for more info.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " <p>\n                                  As you can see ... if, for, html, bound properties, DOM events, data struct holds the state.\n                                  a goroutine gatches data in the background (under the hood this correponds to fetch),\n                                  and uses EventEnv() to synchronize access to data.\n                                </p> ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: "\n                                <p>\n                                  code should cover:\n\n                                  mention Comp struct, CompData struct, NewData method, in brief, with link to components page\n                                  events in brief with link to dom events page\n\n                                </p>\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if allPages.FindByPathOrEmpty(data.Router.Path()).Path == "/doc/program" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "article", DataAtom: vugu.VGAtom(261127), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-md-8 content-body"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Vugu takes a number of steps to make the development process easy to rapidly\n                                    get started and prototype user interfaces. That said, it's important to\n                                    understand the overall preogram structure and how a Vugu program works (at least by\n                                    default), so you can customize it to your needs when building a sophisticated\n                                    application. The basics are fairly simple.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    When you use the HTTP handler in development mode (as shown on the\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "/doc/start"}}}
											parent.AppendChild(n)
											// @click = { data.Router.BrowseTo("/doc/start", event) }
											{
												var i_ interface{} = data.Router
												idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
												var i2_ interface{} = data.Router.BrowseTo
												i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
												n.SetDOMEventHandler("click", vugu.DOMEventHandler{
													ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
													Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
													Args:                  []interface{}{"/doc/start", event},
												})
											}
											if false {
												// force compiler to check arguments for type safety
												data.Router.BrowseTo("/doc/start", event)
											}
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Getting\n                                        Started", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " page), upon page load\n                                    Vugu will convert your .vugu files into .go and also by default attempt to generate\n                                    a main_wasm.go if it does not exist.\n                                    (You can edit main_wasm.go as needed. It is only a template to get your started.\n                                    Vugu will not overwrite it.)\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h2", DataAtom: vugu.VGAtom(187906), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "WebAssembly main()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    Like any Go program, it starts with ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "main()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ". The build constraint at the\n                                    top (see\n                                    Dual Build below) indicates this is the WebAssembly entry point:\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("go", `// +build wasm

package main

import (
	// ...
	"github.com/vugu/vugu"
)

func main() {`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: "\n                                <p>TODO: we need to explain key concepts here like the rneder loop and touch upon lock with EventEnv -\n                                  maybe not the deep dive through every line.  Also touch upon the build tags producing two programs - one for wasm\n                                  and one that's the server (default setup, normal GO package and module system applies and we're not doing\n                                  anything that isn't standard Go.)\n\n                                  An example of http.Get and the locking should probably go here\n                                </p>\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: "\n                                <h2>Main</h2>\n\n                                <p>\n                                  Here is an example of a working <code>main.go</code>:\n                                </p>\n\n                                <p><pre><code>// +build wasm\n\n              package main\n\n              import (\n                  \"log\"\n                  \"os\"\n\n                  \"github.com/vugu/vugu\"\n              )\n\n              func main() {\n\n                  println(\"Entering main()\")\n                  defer println(\"Exiting main()\")\n\n                  rootInst, err := vugu.New(&Root{}, nil)\n                  if err != nil {\n                      log.Fatal(err)\n                  }\n\n                  env := vugu.NewJSEnv(\"#root_mount_parent\", rootInst, vugu.RegisteredComponentTypes())\n                  env.DebugWriter = os.Stdout\n\n                  for ok := true; ok; ok = env.EventWait() {\n                      err = env.Render()\n                      if err != nil {\n                          panic(err)\n                      }\n                  }\n\n              }\n              </code></pre></p>\n              ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: "\n                                <p>That's a fair bit to take in.  Let's go through each part.</p>\n\n                                <p>\n                                  The first line is a <a target=\"_blank\" href=\"https://golang.org/pkg/go/build/#hdr-Build_Constraints\">build tag</a>,\n                                  indicating that this program should only be compiled for WebAssembly:\n                                  <pre><code>// +build wasm</code></pre></p>\n\n                                <p>Program Overview (incl: Render loop)</p>\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h2", DataAtom: vugu.VGAtom(187906), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Root Component", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "To render a page to HTML, you need to have \"root\" component. This is the top level\n                                    component that\n                                    houses everything else. By default this component lives in root.vugu, gets code\n                                    generated to\n                                    root.go, which has a Root struct (the component type) and RootData struct (the\n                                    component's instance data).\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#New"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "vugu.New", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    accepts a\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#ComponentType"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "ComponentType", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    (", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Root", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ")\n                                    and a ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#Props"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "vugu.Props", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    (", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "nil", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " in this case) and returns an\n                                    instance that we can use. Like so:\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("go", `rootInst, err := vugu.New(&Root{}, nil)
if err != nil {
	log.Fatal(err)
}`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h2", DataAtom: vugu.VGAtom(187906), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "JSEnv", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Once we have a root component instance, we need an environment. There are two\n                                    environments currently implemented:\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#JSEnv"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "JSEnv", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    for use in WebAssembly applications, and\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#StaticHTMLEnv"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "StaticHTMLEnv", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    which can be used for server-side rendering and tests. JSEnv is what performs the\n                                    syncing of the virtual DOM from\n                                    by our root component and any nested components to the browser DOM. But before that\n                                    happens, we need to create\n                                    an instance:\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("go", `env := vugu.NewJSEnv("#root_mount_parent",
	rootInst, 
	vugu.RegisteredComponentTypes())`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "ul", DataAtom: vugu.VGAtom(42754), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        The first argument is the location in the page (CSS selector, readable by\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "querySelector", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ")\n                                        of where the component is \"mounted\". By default ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "#root_mount_parent", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        corresponds to\n                                        a ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "<div>", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " immediately inside the ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "<body>", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " tag.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "The second argument is the\n                                        component instance we created above.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        And the last argument is a map of which component types are available\n                                        under which names. The function\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#RegisteredComponentTypes"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "vugu.RegisteredComponentTypes", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        will retreive all of the components that have\n                                        registered themselves with\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#RegisterComponentType"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "vugu.RegisterComponentType", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        (which is the case for all components by default).\n                                        This makes it so you can simply ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "import _ \"path/to/other/components\"", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        and they will be\n                                        available automatically. Components defined directly in your main package are\n                                        also always available by default.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "If you need more control over which component types are available during rendering\n                                    and the names\n                                    they use, or where your application is output on the page, customizing what you pass\n                                    to ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "NewJSEnv", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " is the way to do it.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h2", DataAtom: vugu.VGAtom(187906), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Render Loop", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "The render loop is where the magic happens. Your components' virtual DOM output (see\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#ComponentType"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "ComponentType.BuildVDOM", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ")\n                                    is generated and synchronized with\n                                    the browser's DOM to give you a matching HTML page. This involves various\n                                    optimizations including keeping hashes\n                                    of various pieces of information during rendering so it can cache the result and\n                                    reduce both compution and\n                                    the number of calls into the browser to synchronize DOM.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("go", `for ok := true; ok; ok = env.EventWait() {
  err = env.Render()
  if err != nil {
    panic(err)
  }
}`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    This will call ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "env.Render()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " immediately the first time and then wait\n                                    for\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "env.EventWait()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " to return and render again.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " <h2>The Render Loop and DOM Events</h2> ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "alert alert-warning"}, vugu.VGAttribute{Namespace: "", Key: "role", Val: "alert"}}}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "i", DataAtom: vugu.VGAtom(1537), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "icon-alert-circle"}}}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h4", DataAtom: vugu.VGAtom(214274), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "fs-22"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Important Note", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "When\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "/doc/dom-events"}}}
												parent.AppendChild(n)
												// @click = { data.Router.BrowseTo("/doc/dom-events", event) }
												{
													var i_ interface{} = data.Router
													idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
													var i2_ interface{} = data.Router.BrowseTo
													i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
													n.SetDOMEventHandler("click", vugu.DOMEventHandler{
														ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
														Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
														Args:                  []interface{}{"/doc/dom-events", event},
													})
												}
												if false {
													// force compiler to check arguments for type safety
													data.Router.BrowseTo("/doc/dom-events", event)
												}
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "DOM Events", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        are handled, a (write) lock is acquired against the environment automatically\n                                        and then released when your event handler returns. When things that would block\n                                        (like fetching\n                                        data from the server over HTTP) need to be done, this must be run in a goroutine\n                                        which uses\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#DOMEvent.EventEnv"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "event.EventEnv()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        to acquire their own lock before modifying any component data, to ensure they\n                                        don't interfere with the render loop or other code.\n                                        Locking should only be done during data modification and then unlocked\n                                        immediately afterward. ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Do not put a\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Lock()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " before ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "http.Get()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " or other such\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://en.wikipedia.org/wiki/Blocking_(computing)"}}}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "blocking", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            calls.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " Instead ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Lock()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " after\n                                        you have your data and before updating\n                                        the state of your component.\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#EventEnv"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "EventEnv.UnlockRender()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        will cause the ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "env.EventWait()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " call above to return and update the\n                                        page.\n                                        (Whereas ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#EventEnv"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "EventEnv.UnlockOnly()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        will release the lock but not cause the page update. This is useful if\n                                        you need to do several updates to data at different times\n                                        but only care to refresh the page after they are all done.)\n                                        See ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "/doc/files/code"}}}
												parent.AppendChild(n)
												// @click = { data.Router.BrowseTo("/doc/files/code", event) }
												{
													var i_ interface{} = data.Router
													idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
													var i2_ interface{} = data.Router.BrowseTo
													i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
													n.SetDOMEventHandler("click", vugu.DOMEventHandler{
														ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
														Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
														Args:                  []interface{}{"/doc/files/code", event},
													})
												}
												if false {
													// force compiler to check arguments for type safety
													data.Router.BrowseTo("/doc/files/code", event)
												}
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Code", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " for a\n                                        correct example.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " <p>When\n                                    <a href=\"/doc/dom-events\" @click='data.Router.BrowseTo(\"/doc/dom-events\", event)'>DOM Events</a>\n                                    are handled, a (write) lock is acquired against the environment automatically\n                                  and then released when your event handler returns.  When things that would block (like fetching\n                                  data from the server over HTTP) need to be done, this must be run in a goroutines which must use\n                                  <a target=\"_blank\" href=\"https://godoc.org/github.com/vugu/vugu#DOMEvent.EventEnv\">event.EventEnv()</a>\n                                  to acquire their own lock to ensure they don't interfere with the render loop or other code.\n                                  <a target=\"_blank\" href=\"https://godoc.org/github.com/vugu/vugu#EventEnv\">EventEnv.UnlockRender()</a>\n                                  will cause the <code>env.EventWait()</code> call above to return and update the page.\n                                  (Whereas <a target=\"_blank\" href=\"https://godoc.org/github.com/vugu/vugu#EventEnv\">EventEnv.UnlockOnly()</a>\n                                  will release the lock but not cause the page update. This is useful if\n                                  you need to do several updates at different times but only care to refresh the page after they are all done.)\n                                </p> ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "EventWait", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " will return false if it detects something wrong with the\n                                    environment\n                                    and the program should exit.\n                                    This should release any resources and be a clean exit from the program when the page\n                                    goes away.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h2", DataAtom: vugu.VGAtom(187906), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "The Dual-Build Approach", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "The discussion above is only about the WebAssembly side of your application.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    Using Go's ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://golang.org/pkg/go/build/#hdr-Build_Constraints"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "build\n                                        constraints", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    it is easy to output two different executables from your same package directory.\n                                    The common case is that you want a client-side build that compiles to WebAssembly\n                                    (as discussed above),\n                                    as well as a server-side executable to act as a web server. These each need\n                                    different\n                                    main() and likely other functions, but your components and other functionality\n                                    should\n                                    be available both in your WebAssembly output and in your server program.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    This is why the ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "main()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " function for your client-side application lives\n                                    in\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "em", DataAtom: vugu.VGAtom(28162), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "main_wasm.go", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ". The \"_wasm\" part indicates that the file should be included\n                                    during\n                                    a WebAssembly build. You can and should include a server-side ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "main()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " in\n                                    another file\n                                    and use\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "nobr", DataAtom: vugu.VGAtom(14084), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "// +build !wasm", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    at the top as the inverse build constraint.\n                                    See ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "/doc/build-and-dist"}}}
											parent.AppendChild(n)
											// @click = { data.Router.BrowseTo("/doc/build-and-dist", event) }
											{
												var i_ interface{} = data.Router
												idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
												var i2_ interface{} = data.Router.BrowseTo
												i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
												n.SetDOMEventHandler("click", vugu.DOMEventHandler{
													ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
													Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
													Args:                  []interface{}{"/doc/build-and-dist", event},
												})
											}
											if false {
												// force compiler to check arguments for type safety
												data.Router.BrowseTo("/doc/build-and-dist", event)
											}
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Building and\n                                        Distribution", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    for more info.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if allPages.FindByPathOrEmpty(data.Router.Path()).Path == "/doc/dom-events" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "article", DataAtom: vugu.VGAtom(261127), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-md-8 content-body"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " <p>DOM events</p> ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Using the browser's\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Document\n                                        Object Model (DOM)", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ",\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://developer.mozilla.org/en-US/docs/Web/Events"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "events", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " can be\n                                    attached to HTML elements by providing an attribute of the event name\n                                    prefixed with ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "@", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ". For example\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "nobr", DataAtom: vugu.VGAtom(14084), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "<div @click='data.HandleClick()'>", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "The name of the event correspoonds to a regular DOM event as would be provided to\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "addEventListener", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "The Go expression provided must be a Go method\n                                    call. The method name must be exported (begin with an upper case letter). Other Go\n                                    statements are not currently allowed. The arguments to the function call can be\n                                    anything valid in Go,\n                                    including literals.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("html", `<div>
    <div vg-if='data.Show'>I am here!</div>
    <button @click='data.Toggle()'>Toggle me Silly</button>
</div>

<script type="application/x-go">
func (data *RootData) Toggle() { data.Show = !data.Show }
type RootData struct {
  Show bool
}
</script>`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "ul", DataAtom: vugu.VGAtom(42754), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "The special variable ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "event", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " (of type\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#DOMEvent"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "*vugu.DOMEvent", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ")\n                                        corresponds to the event data sent to us by the browser. It also provides some\n                                        useful functionality\n                                        such as a ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "PreventDefault()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " method which corresponds to\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "preventDefault", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "For operations that involve blocking", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " (waiting for I/O - such as\n                                        fetching data from a URL),\n                                        you should create a goroutine and use\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#EventEnv"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "event.EventEnv()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        to acquire\n                                        a lock before modifying data, and release it afterward. ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "br", DataAtom: vugu.VGAtom(514), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\u00a0\n\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "alert alert-warning"}, vugu.VGAttribute{Namespace: "", Key: "role", Val: "alert"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "i", DataAtom: vugu.VGAtom(1537), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "icon-alert-circle"}}}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h4", DataAtom: vugu.VGAtom(214274), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "fs-22"}}}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Important", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													{
														parent := n
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                When your event handler method is called, an exclusive lock is already\n                                                acquired\n                                                against the rendering environment. It is released automatically when\n                                                your handler method exits.\n                                                Do not block waiting for I/O inside your handler directly, instead use a\n                                                goroutine.\n                                                Inside the goroutine (and ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "only inside goroutines, not directly\n                                                    in your handler method", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ")\n                                                you must\n                                                use\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#EventEnv"}}}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
															{
																parent := n
																n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "event.EventEnv().Lock()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
																parent.AppendChild(n)
															}
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                and ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "event.EventEnv().UnlockRender()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                (or ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "UnlockOnly()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ") to ensure only one thing is accessing\n                                                your information at a time.\n                                                You can also use ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "RLock()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " and ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "RUnlock()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " for\n                                                read-only access from a goroutine.\n                                                These methods behave exactly as you would expect from\n                                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
														n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://golang.org/pkg/sync/#RWMutex"}}}
														parent.AppendChild(n)
														{
															parent := n
															n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "RWMutex", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
															parent.AppendChild(n)
														}
														n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                                and if you have never used one of those, now would be a great time to\n                                                bone up on them.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
														parent.AppendChild(n)
													}
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n                                        See ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "/doc/files/code"}}}
												parent.AppendChild(n)
												// @click = { data.Router.BrowseTo("/doc/files/code", event) }
												{
													var i_ interface{} = data.Router
													idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
													var i2_ interface{} = data.Router.BrowseTo
													i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
													n.SetDOMEventHandler("click", vugu.DOMEventHandler{
														ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
														Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
														Args:                  []interface{}{"/doc/files/code", event},
													})
												}
												if false {
													// force compiler to check arguments for type safety
													data.Router.BrowseTo("/doc/files/code", event)
												}
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Code", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        for an example of using a goroutine to fetch data and locking/unlocking when\n                                        handling the results.\n\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Note that the method call arguments must hash properly", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " with\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#ComputeHash"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "ComputeHash()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ",\n                                        as this is needed by Vugu\n                                        to keep track of its events internally. Most primitive types that just store\n                                        data are fine, but please, no channels.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " <p>\n                                  Event handling and event name, *vugu.DOMEvent type\n                                  evaluation\n                                  do not block the callback method, you should attempt to only do\n                                  variable comparisons and assignments and delegate longer running tasks to a goroutine.  this specifically applies to calling http.Get() (which calls the browser's fetch() implementation) and other such calls to retrieve data.\n                                  locking, done automatically or EventEnv() for separate gorountines\n                                  Show example of processing in background using http.Get()\n                                </p> ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if allPages.FindByPathOrEmpty(data.Router.Path()).Path == "/doc/components" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "article", DataAtom: vugu.VGAtom(261127), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-md-8 content-body"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Components are individual files which are used to organize your user\n                                        interface code.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    Each component lives in a .vugu file. Each .vugu file is processed to produce\n                                    a .go file. Like all Go code, each directory is a package and you may add\n                                    additional .go files to it and use them as part of your component.\n                                    Vugu does some\n                                    code generation, but otherwise does not interfere with the regular Go build\n                                    process at all.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    Under the hood, components implement the\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#ComponentType"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "ComponentType", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    interface. Although this is\n                                    unimportant to most developers as the code generator does the work to\n                                    implement it based on your .vugu file.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    By default, the component named ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "root", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " (and thus living in root.vugu)\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "is the top\n                                        level component", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " and is rendered just inside the ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "<body>", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    tag on your page.\n                                    In this case, there is only one instance of your root component, which is created in\n                                    your ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "main()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " function.\n                                    (If you've followed the\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "/doc/files/start"}}}
											parent.AppendChild(n)
											// @click = { data.Router.BrowseTo("/doc/files/start", event) }
											{
												var i_ interface{} = data.Router
												idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
												var i2_ interface{} = data.Router.BrowseTo
												i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
												n.SetDOMEventHandler("click", vugu.DOMEventHandler{
													ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
													Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
													Args:                  []interface{}{"/doc/files/start", event},
												})
											}
											if false {
												// force compiler to check arguments for type safety
												data.Router.BrowseTo("/doc/files/start", event)
											}
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Getting\n                                        Started", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    instructions you can find this code in main_wasm.go)\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    Things get interesting when we introduce the idea of ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "multiple\n                                        components", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " into an application.\n                                    Each component goes in it's own .vugu file. Use at least one hyphen to avoid name\n                                    conflicts with regular\n                                    HTML tags.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    One component can include an ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "HTML tag with the name of another\n                                        component", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".\n                                    When this happens, it indicates than an instance\n                                    of this other component should be created. Let's look at an example:\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("html", `<!-- root.vugu -->
<div class="root">
    <ul>
      <my-line file-name="example.txt" :line-number="rand.Int63n(100)" />
    </ul>
</div>

<script type="application/x-go">
import "math/rand"
</script>
`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("html", `<!-- my-line.vugu -->

<li class="my-line">
  <strong vg-html='data.FileName'></strong>:<span vg-html='data.LineNumber'></span>
</li>

<script type="application/x-go">
type MyLineData struct {
  FileName string
  LineNumber int
}
func (comp *MyLine) NewData(props vugu.Props) (interface{}, error) { 
  ret := &MyLineData{}
  ret.FileName, _ = props["file-name"].(string)
  ret.LineNumber, _ = props["line-number"].(int)
  return ret, nil
}
</script>`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "In this case the ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "<my-line>", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " tag gets replaced with the\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "<li>", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " tag and its contents as\n                                    rendered by the my-line component.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    As shown in the example, the HTML attributes of the tag are passed as properties\n                                    (", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#Props"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "vugu.Props", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ", which is\n                                    just a\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "map[string]interface{}", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ") to the component instance.\n                                    Attributes with a colon (", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ":", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ")\n                                    will be evaluated as Go code and then the result passed as-is (not converted in any\n                                    way).\n                                    This allows you to pass arbitrarily complex data, or pointers, etc. into components\n                                    if needed.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    The ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "NewData", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " method on the component type is responsible for reading the\n                                    props\n                                    passed into it and populating the data struct for this component instance.\n                                    (This method is part of satisfying the\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#ComponentType"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "ComponentType", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    interface.)\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    Components can be instantiated as many times as needed. Each one causes a new\n                                    instance\n                                    to be created. Like so:\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("html", `<!-- root.vugu -->

<div class="root">
    <ul>
      <my-line vg-for='i := 0; i < 10; i++' 
        file-name="example.txt" :line-number="i" />
    </ul>
</div>
`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    Vugu needs a way to determine, when re-rendering the HTML, which components are the\n                                    same and which\n                                    are now different and should be re-created. This is determined by calling\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#ComputeHash"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "ComputeHash", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    on the attributes (including dynamically evaluted/colon prefixed ones after\n                                    evaluation) and if the hash\n                                    is different a new instance is created. If it's the same, the same one is re-used.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    Any component can include any other registered component. But if components include\n                                    each other\n                                    in a loop the behavior is undefined (but I can promise you it won't be good).\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "alert alert-warning"}, vugu.VGAttribute{Namespace: "", Key: "role", Val: "alert"}}}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "i", DataAtom: vugu.VGAtom(1537), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "icon-alert-circle"}}}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h4", DataAtom: vugu.VGAtom(214274), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "fs-22"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Note", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "By default components register themselves in an ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "init()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " function by\n                                        calling\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#RegisterComponentType"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "RegisterComponentType", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".\n                                        And by default in ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "main()", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " all registered components are retrieved\n                                        and made available.\n                                        So you can place ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "import _ \"your/package\"", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " in any file and if that\n                                        package contains components\n                                        they will be available for use. This behavior can also easily be changed by\n                                        modifying the appropriate\n                                        behavior in main_wasm.go, in case you need more control over what components are\n                                        available\n                                        under what names.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: "\n                              <p>\n                                talk about the root component\n\n                                component names with a dash\n\n                                NewData method\n\n                                explain props\n\n                                CompData struct, feel free to add fields, per instance\n                                methods can and should go on CompData\n\n                                DOM event handling and variable names\n\n                                Component Events (explain difference between DOM events) are planned as a feature.\n                              </p>\n                              ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: "\n                            <article class=\"col-md-8 content-body\" vg-if='allPages.FindByPathOrEmpty(data.Router.Path()).Path==\"/doc/components-in-depth\"'>\n                              components in depth\n\n                              mention generated BuildVDOM and that you can look at a generated .go file to see, but it's done automatically\n                              variables available - comp, data, event\n\n                              explain for loops and bound attributes and how these end up in go code\n\n                              NewData method  and in which cases it's called\n\n                              Comp struct, only one instance for the whole app, corresponds to the component type, can have config here if needed for complex cases, but often this is just empty\n\n                              show component written manually in Go, with all it's parts - comments to show what is auto generated and\n                              what would normally be copied from the vugu file\n\n                            </article>\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if allPages.FindByPathOrEmpty(data.Router.Path()).Path == "/doc/build-and-dist" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "article", DataAtom: vugu.VGAtom(261127), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-md-8 content-body"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " <p>Building and Distribution</p> ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "The development setup described in\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "/doc/start"}}}
											parent.AppendChild(n)
											// @click = { data.Router.BrowseTo("/doc/start", event) }
											{
												var i_ interface{} = data.Router
												idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
												var i2_ interface{} = data.Router.BrowseTo
												i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
												n.SetDOMEventHandler("click", vugu.DOMEventHandler{
													ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
													Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
													Args:                  []interface{}{"/doc/start", event},
												})
											}
											if false {
												// force compiler to check arguments for type safety
												data.Router.BrowseTo("/doc/start", event)
											}
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Getting\n                                        Started", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    is a great way to get going with Vugu. But\n                                    when you're ready to move your application to a staging or production environment\n                                    (or you need\n                                    to do development work on the Go server part of your web application), additional\n                                    steps\n                                    are in order.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h2", DataAtom: vugu.VGAtom(187906), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Adding a Server", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "The server you created on the Getting Started page is only a single file, it does not\n                                    compile as part of your application (due to the ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "// +build ignore", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " at the\n                                    top).\n                                    The main reason for this is that it makes things simpler when you are just hacking\n                                    away\n                                    on your user interface. If you enter bad code into a .vugu file (which ends up\n                                    in a .go file and breaks your build), ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "go run devserver.go", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    will still run.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "To make a proper server suitable for staging or production, or to start adding more\n                                    server-side functionality to, you'll want to create a server.go file, and place\n                                    separate\n                                    web server code in here. It is suggested you leave devserver.go where it is and you\n                                    can\n                                    use it if/when needed, it won't conflict with server.go.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Note that server.go looks really similar to devserver.go in the beginning. But\n                                    as you add server-side functionality other things to server.go, the need for it\n                                    becomes more apparent. We also have some additional command line flags that\n                                    are useful for an application running on a server.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "This example includes a ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "-dev", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " flag to\n                                    enable automatically performing Vugu code generation and rebuilding your\n                                    wasm (same as devserver.go), which you can turn on and off.\n                                    Running without ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "-dev", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ", this can also serve as a viable production\n                                    server.\n                                    (Obviously you need to be aware of your specific production environment\n                                    requirements,\n                                    but this will get you pointed in the right direction.)", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Command line flags for the HTTP listener and the directory to look for files in are\n                                    also included. ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "server.go", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ":", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("go", `// +build !wasm

package main

//go:generate vugugen .

import (
	"flag"
	"log"
	"net/http"
	"os"
	"path/filepath"

	"github.com/vugu/vugu/simplehttp"
)

func main() {
	dev := flag.Bool("dev", false, "Enable development features")
	dir := flag.String("dir", ".", "Project directory")
	httpl := flag.String("http", "127.0.0.1:8877", "Listen for HTTP on this host:port")
	flag.Parse()
	wd, _ := filepath.Abs(*dir)
	os.Chdir(wd)
	log.Printf("Starting HTTP Server at %q", *httpl)
	h := simplehttp.New(wd, *dev)
	log.Fatal(http.ListenAndServe(*httpl, h))
}
`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    To run this server, you can either build the binary and run it directly, or ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "go\n                                        run . -dev", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    also works.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h2", DataAtom: vugu.VGAtom(187906), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Making dist.go", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    Rather than introducing third party build tools, the suggested approach to\n                                    distributing your\n                                    application is to create a small file called dist.go (ignored by the rest of your\n                                    application)\n                                    that you run when you want to build your distribution. The\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu/distutil"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "distutil", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " package has\n                                    some\n                                    convient functions that make this less tedious than it might seem. This approach\n                                    also\n                                    has the advantage that it works equally well on Windows, Linux and Mac, and without\n                                    having to install anything. The Go module system takes care of that for you.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Various steps are possible and there is not a one-size-fits-all dist.go. That said,\n                                    here's one that will get you started:\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "ul", DataAtom: vugu.VGAtom(42754), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "It creates a ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\"dist\" folder, copies the static\n                                            files", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " from your project into it\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "It finds and copies ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "wasm_exec.js", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "It makes sure ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "vugugen", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " is installed", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "It runs ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "go generate", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-2"}}}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "It ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "builds your main.wasm", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " file", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "li", DataAtom: vugu.VGAtom(45570), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "And if desired you can make it ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "write out an index.html", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " or build\n                                        your ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "server executable", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n.InnerHTML = fmt.Sprint(showCode("go", `// +build ignore

package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"time"

	"github.com/vugu/vugu/distutil"
)

func main() {

	clean := flag.Bool("clean", false, "Remove dist dir before starting")
	dist := flag.String("dist", "dist", "Directory to put distribution files in")
	flag.Parse()

	start := time.Now()

	if *clean {
		os.RemoveAll(*dist)
	}

	os.MkdirAll(*dist, 0755) // create dist dir if not there

	// copy static files
	distutil.MustCopyDirFiltered(".", *dist, nil)

	// find and copy wasm_exec.js
	distutil.MustCopyFile(distutil.MustWasmExecJsPath(), filepath.Join(*dist, "wasm_exec.js"))

	// check for vugugen and go get if not there
	if _, err := exec.LookPath("vugugen"); err != nil {
		fmt.Print(distutil.MustExec("go", "get", "github.com/vugu/vugu/cmd/vugugen"))
	}

	// run go generate
	fmt.Print(distutil.MustExec("go", "generate", "."))

	// run go build for wasm binary
	fmt.Print(distutil.MustEnvExec([]string{"GOOS=js", "GOARCH=wasm"}, "go", "build", "-o", filepath.Join(*dist, "main.wasm"), "."))

	// STATIC INDEX FILE:
	// if you are hosting with a static file server or CDN, you can write out the default index.html from simplehttp
	// req, _ := http.NewRequest("GET", "/index.html", nil)
	// outf, err := os.OpenFile(filepath.Join(*dist, "index.html"), os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0644)
	// distutil.Must(err)
	// defer outf.Close()
	// template.Must(template.New("_page_").Parse(simplehttp.DefaultPageTemplateSource)).Execute(outf, map[string]interface{}{"Request": req})

	// BUILD GO SERVER:
	// or if you are deploying a Go server (yay!) you can build that binary here
	// fmt.Print(distutil.MustExec("go", "build", "-o", filepath.Join(*dist, "server"), "."))

	log.Printf("dist.go complete in %v", time.Since(start))
}`))
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    By dropping the above is dist.go and tuning it, you can run ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "go run\n                                        dist.go", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    and get a ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "dist folder with the distribution of your project", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ", ready for\n                                    deployment. And you can of course easily call this from another build/distribution\n                                    system,\n                                    such as a Dockerfile.\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: "\n                                .gitignore dist folder\n\n                                server.go should have flag for dev and flag for http listener and flag for main dir, defaulting to \".\"\n\n                                make sure to include go:generate in server.go\n\n                                <p>need to mention how to set title and meta tags as part of setting up server\n\n                                  actually we need to show two approaches here - one with a dev/prod Go server, along with its\n                                  build script\n\n                                  and then an entirely different setup which outputs static HTML to the dist folder,\n                                   for use with static file servers, CDNs, etc.\n\n                                   bulleted list for each?\n                                </p>\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: "\n                            <article class=\"col-md-8 content-body\">\n\n                              <p>You can change a domain's contact information at any time. Domains have four sets of contacts, which are listed below after the instructions.</p>\n\n                              <div class=\"alert alert-warning\" role=\"alert\">\n                                <i class=\"icon-alert-circle\"></i>\n                                <h4 class=\"fs-22\">Tip</h4>\n                                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos minus, qui error eveniet! Et consequuntur fugit nulla nam</p>\n                              </div>\n\n                              <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Id illo eveniet blanditiis aliquam voluptatem quaerat sapiente alias ex pariatur quasi, ipsa dolorem impedit nemo eius, hic est magnam quisquam soluta!</p>\n\n\n                              <section id=\"section-1\">\n                                <h2 class=\"section-title-2\">Quick Start <a data-scroll href=\"#section-2\" class=\"anchor\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Copy URL\"><i class=\"icon-hash\"></i></a></h2>\n                                <ol class=\"step-list\">\n                                  <li><div>\n                                    <p>Go to the <a href=\"\" class=\"external\">Domains Settings</a> page.</p>\n                                  </div></li>\n                                  <li><div>\n                                    <p>Under Contact Information, click Edit. (Note: if you don't see the Edit link, you may have Domain Privacy turned on. Click the View personal information link, and then you'll be able to click the Edit link.)</p>\n                                  </div>\n                                    <ol>\n                                      <li><div>\n                                        <p>To edit All Contacts, enter the Contact, Address, Phone, and Email information you want to update, and then click OK.</p>\n                                      </div></li>\n                                      <li><div>\n                                        <p>To edit each individual contact, clear the Use for all contact types check box and enter the information you want to update.</p>\n                                      </div></li>\n                                    </ol>\n                                  </li>\n                                  <li><div>\n                                    <p>Click Save</p>\n                                  </div></li>\n                                </ol>\n                              </section>\n\n\n                              <section id=\"section-2\">\n                                <h2 class=\"section-title-2\">Video Preview <a data-scroll href=\"#section-2\" class=\"anchor\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Copy URL\"><i class=\"icon-hash\"></i></a></h2>\n                                <div class=\"row\">\n                                  <div class=\"col-12\">\n                                    <video\n                                      id=\"video\"\n                                      class=\"youtube video-js vjs-default-skin video-16-9\"\n                                      controls\n                                      width=\"640\" height=\"264\"\n                                      data-setup='{ \"techOrder\": [\"youtube\"], \"sources\": [{ \"type\": \"video/youtube\", \"src\": \"https://www.youtube.com/watch?v=DkeiKbqa02g\"}], \"youtube\": { \"ytControls\": 2 } }'\n                                    >\n                                    </video>\n                                  </div>\n                                </div>\n                              </section>\n\n\n                              <section id=\"section-3\">\n                                <h2 class=\"section-title-2\">Typography <a data-scroll href=\"#section-3\" class=\"anchor\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Copy URL\"><i class=\"icon-hash\"></i></a></h2>\n                                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Molestiae debitis dicta, dolorum modi aliquam praesentium, molestias! Quibusdam magni natus eligendi, delectus odit, veritatis dignissimos voluptate dolorum vitae laborum fuga? Facilis.</p>\n                                <div class=\"row gutter-2\">\n                                  <div class=\"col-8 col-md-5\">\n                                    <div class=\"type boxed\">\n                                      <div>\n                                        <span class=\"badge badge-primary\">New</span>\n                                        <h5 class=\"type-title\">Open Sans</h5>\n                                        <div class=\"type-example\">\n                                          <span>Ab</span>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                  <div class=\"col-8 col-md-5\">\n                                    <div class=\"type bordered\">\n                                      <div>\n                                        <h5 class=\"type-title\">Open Sans</h5>\n                                        <div class=\"type-example\">\n                                          <span>Ab</span>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              </section>\n\n                              <section id=\"section-4\">\n                                <h2 class=\"section-title-2\">File Tree <a data-scroll href=\"#section-4\" class=\"anchor\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Copy URL\"><i class=\"icon-hash\"></i></a></h2>\n                                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Suscipit magnam exercitationem fugit doloremque ut, neque nobis fuga voluptatum minima officiis iure consectetur nemo maiores, hic qui rem quae dolor dolorem.</p>\n                                <div class=\"row\">\n                                  <div class=\"col-md-8\">\n                                    <div class=\"bordered p-2 p-md-5\">\n                                      <ul class=\"file-tree\">\n                                        <li class=\"file-tree-folder empty\">Images\n                                          <span>description</span>\n                                        </li>\n                                        <li class=\"file-tree-folder\">CSS\n                                          <span>description</span>\n                                          <ul>\n                                            <li>file name <span>description</span></li>\n                                            <li>file name <span>description</span></li>\n                                          </ul>\n                                        </li>\n                                        <li class=\"file-tree-folder\">HTML\n                                          <span>description</span>\n                                          <ul>\n                                            <li class=\"file-tree-folder\">PAGES\n                                              <span>description</span>\n                                              <ul>\n                                                <li>file name <span>description</span></li>\n                                                <li>file name <span>description</span></li>\n                                                <li>file name <span>description</span></li>\n                                              </ul>\n                                            </li>\n                                            <li>file name <span>description</span></li>\n                                            <li>file name <span>description</span></li>\n                                          </ul>\n                                        </li>\n                                        <li>index.html <span>description</span></li>\n                                        <li>components.html <span>description</span></li>\n                                      </ul>\n                                    </div>\n                                  </div>\n                                </div>\n                              </section>\n\n                            </article>\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " / content ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " sidebar ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "aside", DataAtom: vugu.VGAtom(67333), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-md-4 content-aside bg-light"}}}
								parent.AppendChild(n)
								{
									parent := n
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "widget"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h3", DataAtom: vugu.VGAtom(199938), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "widget-title"}}}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Documentation", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "list-group list-group-related"}}}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											for key, value := range allPages.SiteDocPages() {
												_, _ = key, value
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "list-group-item list-group-item-action d-flex align-items-center active"}}}
												parent.AppendChild(n)
												n.Props = vugu.Props{
													"href": value.Path,
												}
												// @click = { data.Router.BrowseTo(value.Path, event) }
												{
													var i_ interface{} = data.Router
													idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
													var i2_ interface{} = data.Router.BrowseTo
													i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
													n.SetDOMEventHandler("click", vugu.DOMEventHandler{
														ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
														Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
														Args:                  []interface{}{value.Path, event},
													})
												}
												if false {
													// force compiler to check arguments for type safety
													data.Router.BrowseTo(value.Path, event)
												}
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "i", DataAtom: vugu.VGAtom(1537), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "fs-20 icon-file-text2 text-primary mr-1"}}}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "span", DataAtom: vugu.VGAtom(40708), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
													n.InnerHTML = fmt.Sprint(value.ShortTitle)
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: "\n                                        <a href=\"#\" class=\"list-group-item list-group-item-action d-flex align-items-center active\">\n                                          <i class=\"fs-20 icon-file-text2 text-primary mr-1\"></i>\n                                          Registering Domain Names\n                                        </a>\n                                        <a href=\"#\" class=\"list-group-item list-group-item-action d-flex align-items-center active\">\n                                          <i class=\"fs-20 icon-file-text2 text-primary mr-1\"></i>\n                                          What's the difference between a domain and a website?\n                                        </a>\n                                        <a href=\"#\" class=\"list-group-item list-group-item-action d-flex align-items-center active\">\n                                          <i class=\"fs-20 icon-file-text2 text-primary mr-1\"></i>\n                                          What is protected registration ?\n                                        </a>\n                                        <a href=\"#\" class=\"list-group-item list-group-item-action d-flex align-items-center active\">\n                                          <i class=\"fs-20 icon-file-text2 text-primary mr-1\"></i>\n                                          Transfer domain to another registrar\n                                        </a>\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " / sidebar ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
							}
							n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
							parent.AppendChild(n)
						}
						n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
					}
					n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
					parent.AppendChild(n)
				}
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
			}
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " / sidebar layout ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " TODO: this is kinda cool, see if we can hack it in later ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " interpost ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "section", DataAtom: vugu.VGAtom(354311), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "bg-dark text-white separator-bottom p-0"}}}
		parent.AppendChild(n)
		{
			parent := n
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
			n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "container"}}}
			parent.AppendChild(n)
			{
				parent := n
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
				n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "row gutter-0"}}}
				parent.AppendChild(n)
				{
					parent := n
					n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
					parent.AppendChild(n)
					n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-12 col-md-6"}}}
					parent.AppendChild(n)
					{
						parent := n
						n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
						n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "br", DataAtom: vugu.VGAtom(514), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
						n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
						n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " <h4 class=\"interpost interpost-prev\"><a href=\"\">Forwarding your incoming support email to Zendesk using Yahoo</a></h4> ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
						n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
					}
					n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
					parent.AppendChild(n)
					n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-12 col-md-6 text-right"}}}
					parent.AppendChild(n)
					{
						parent := n
						n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
						n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " interpost-next  - this class was causing some funk, took it out ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
						n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
						if nextpg := allPages.FindNextDocPage(data.Router.Path()); nextpg != nil {
							n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h4", DataAtom: vugu.VGAtom(214274), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "interpost "}}}
							parent.AppendChild(n)
							{
								parent := n
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n.InnerHTML = fmt.Sprint(nextpg.LongTitle)
								n.Props = vugu.Props{
									"href": nextpg.Path,
								}
								// @click = { data.Router.BrowseTo(nextpg.Path, event) }
								{
									var i_ interface{} = data.Router
									idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
									var i2_ interface{} = data.Router.BrowseTo
									i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
									n.SetDOMEventHandler("click", vugu.DOMEventHandler{
										ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
										Method:                reflect.ValueOf(data.Router).MethodByName("BrowseTo"),
										Args:                  []interface{}{nextpg.Path, event},
									})
								}
								if false {
									// force compiler to check arguments for type safety
									data.Router.BrowseTo(nextpg.Path, event)
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
							}
						}
						n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
					}
					n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
					parent.AppendChild(n)
				}
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
			}
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " / interpost ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
	}
	return
}

func init() { vugu.RegisterComponentType("site-doc", &SiteDoc{}) }
