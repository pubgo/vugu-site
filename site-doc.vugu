<section class="site-doc">


    <!-- hero -->
    <section class="hero bg-blue">
        <div class="container">
            <div class="row">
                <div class="col-md-8 text-white mb-3">
                    <h1 class="h2 pb-1 pt-2" vg-html="allPages.FindByPathOrEmpty(data.Router.Path()).LongTitle"></h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb breadcrumb-minimal">
                            <li class="breadcrumb-item"><a href="/" @click='data.Router.BrowseTo("/", event)'>Home</a>
                            </li>
                            <li class="breadcrumb-item"><a href="/doc"
                                                           @click='data.Router.BrowseTo("/doc", event)'>Doc</a></li>
                            <li vg-if='allPages.FindByPathOrEmpty(data.Router.Path()).Path!="/doc"'
                                class="breadcrumb-item active"
                                vg-html="allPages.FindByPathOrEmpty(data.Router.Path()).ShortTitle"></li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </section>
    <!-- / hero -->


    <!-- sidebar layout -->
    <section class="">
        <div class="container overlay-item-top">
            <div class="row">
                <div class="col">
                    <div class="content boxed">
                        <div class="row separated">

                            <!-- content -->

                            <article class="col-md-8 content-body"
                                     vg-if='allPages.FindByPathOrEmpty(data.Router.Path()).Path=="/doc"'>

                                <p>Vugu is Go library which makes it easy to write web user interfaces in Go.</p>

                                <p>The basic idea is as follows:</p>

                                <ul>

                                    <li><strong>You write UI components in .vugu files</strong>. These files are similar
                                        to UI components you might see in
                                        JavaScript frameworks (e.g. .vue files). However, they contain no JavaScript and
                                        instead have Go language expressions for
                                        <code>if</code>, <code>for</code> and other such functionality.<br/>&nbsp;
                                    </li>

                                    <li>
                                        <strong>Each .vugu file is converted to a corresponding .go file.</strong> There
                                        is a development server in the Vugu project
                                        which can do this for you automatically on page reload, or the
                                        <code>vugugen</code> command line tool can be used to integrate
                                        with <code>go generate</code>. The code generation also attempts to provide
                                        sensible defaults where needed so your .vugu
                                        files contain as little boilerplate as possible, while still allowing extensive
                                        customization if desired.
                                        <br/>&nbsp;
                                    </li>

                                    <li>
                                        <strong>Your project is compiled to a WebAssembly module and run in the
                                            browser.</strong> Again, the development server makes this easy to
                                        do when starting a project. As your project evolves and you need to customize
                                        parts of this process you can easily do so.<br/>&nbsp;
                                    </li>

                                    <li>
                                        <strong>The Vugu library</strong> (package: <a target="_blank"
                                                                                       href="https://github.com/vugu/vugu">github.com/vugu/vugu</a>)
                                        <strong>provides functionality to efficiently synchronize HTML DOM</strong> on a
                                        web page according to the markup
                                        in your .vugu files. Features like attaching DOM event handlers (click, etc.)
                                        and breaking large pages up into components
                                        are supported.
                                    </li>

                                </ul>

                            </article>

                            <article class="col-md-8 content-body"
                                     vg-if='allPages.FindByPathOrEmpty(data.Router.Path()).Path=="/doc/start"'>

                                <p>
                                    Let's make a basic working Vugu application that runs in your browser. It
                                    only takes three small files to start. Make sure you have at least
                                    <strong><a target="_blank" href="https://golang.org/dl/">Go</a> 1.13</strong>
                                    installed.
                                </p>

                                <section id="section-1">
                                    <!-- <h2 class="section-title-2">Quick Start <a data-scroll href="#section-2" class="anchor" data-toggle="tooltip" data-placement="top" title="Copy URL"><i class="icon-hash"></i></a></h2> -->
                                    <ol class="step-list">
                                        <li>
                                            <div>
                                                <p>
                                                    <strong>Create a new empty folder anywhere you like.</strong> We'll
                                                    use the name <code>testapp</code> as an example.
                                                    Each file you create will be directly in this folder, no subfolders
                                                    are needed.
                                                </p>
                                            </div>
                                        </li>
                                        <li>
                                            <div>
                                                <p><strong>Create</strong> <code>go.mod</code> which specifies a
                                                    <a target="_blank"
                                                       href="https://github.com/golang/go/wiki/Modules#gomod">Go
                                                        module</a> name. To get started, you can
                                                    pick any name you like as a placeholder following the pattern shown.
                                                    For example:</p>

                                                <p>
                                                <pre><code>module example.org/someone/testapp
</code></pre>
                                                </p>
                                            </div>
                                        </li>
                                        <li>
                                            <div>
                                                <p>
                                                    <strong>Create a Vugu component file.</strong>
                                                    We'll put a click handler and an element that toggles to demonstrate
                                                    some basic functionality.
                                                    This first component should be called <code>root.vugu</code>:
                                                <div vg-html='showCode("html",`<div class="my-first-vugu-comp">
    <button @click="data.Toggle()">Test</button>
    <div vg-if="data.Show">I am here!</div>
</div>

<style>
.my-first-vugu-comp { background: #eee; }
</style>

<script type="application/x-go">
type RootData struct { Show bool }
func (data *RootData) Toggle() { data.Show = !data.Show }
</script>`)'></div>
                                                <!--
                                                <pre><code>&lt;div class="my-first-vugu-comp">
                          &lt;button @click="data.Toggle()">Test&lt;/button>
                          &lt;div vg-if="data.Show">I am here!&lt;/div>
                      &lt;/div>

                      &lt;style>
                      .my-first-vugu-comp { background: #eee; }
                      &lt;/style>

                      &lt;script type="application/x-go">
                      type RootData struct { Show bool }
                      func (data *RootData) Toggle() { data.Show = !data.Show }
                      &lt;/script>
                      </code></pre>-->
                                                </p>
                                            </div>
                                        </li>
                                        <li>
                                            <div>
                                                <p><strong>Create a development server file.</strong> Note that this
                                                    does not get compiled to WebAssembly.
                                                    This is a server which serves your program up to the browser.
                                                    <code>devserver.go</code>:
                                                <p>
                                                <div vg-html='showCode("go",`// +build ignore

package main

import (
	"log"
	"net/http"
	"os"

	"github.com/vugu/vugu/simplehttp"
)

func main() {
	wd, _ := os.Getwd()
	l := "127.0.0.1:8844"
	log.Printf("Starting HTTP Server at %q", l)
	h := simplehttp.New(wd, true)
	// include a CSS file
	// simplehttp.DefaultStaticData["CSSFiles"] = []string{ "/my/file.css" }
	log.Fatal(http.ListenAndServe(l, h))
}
`)'></div>
                                                <!-- </code></pre> -->
                                                </p>
                                            </div>
                                        </li>
                                        <li>
                                            <div>
                                                <p><strong>Run the server</strong>.
                                                    While in the same directory, run the command <code>go run
                                                        devserver.go</code></p>
                                                <p>After a few brief moments, the server should start. It works the same
                                                    on
                                                    Windows, Linux or Mac.</p>
                                            </div>
                                        </li>
                                        <li>
                                            <div>
                                                <p><strong>Browse to it</strong>: <a target="_blank"
                                                                                     href="http://127.0.0.1:8844/">http://127.0.0.1:8844/</a>
                                            </div>
                                        </li>
                                        <li>
                                            <div>
                                                <p>Marvel at the wonder you have created.
                                            </div>
                                        </li>

                                    </ol>
                                </section>

                            </article>

                            <article class="col-md-8 content-body"
                                     vg-if='allPages.FindByPathOrEmpty(data.Router.Path()).Path=="/doc/files"'>

                                <p>Vugu files have three sections: Markup, Style and Code</p>

                                <p>
                                    <strong>Markup</strong> is the HTML element which is the display portion of your
                                    file.
                                    More often than not it is a simple div tag, such as: </p>
                                <div vg-html='showCode("html",`<div class="some-name">
  <!-- ... -->
</div>`)'></div>

                                <p>
                                    It is displayed at the appropriate location in the document. For the
                                    root component (by default named "root" and living in root.vugu), this is usually
                                    immediately
                                    inside the <code>&lt;body></code> tag of the page. The element can be of any type
                                    except
                                    <code>&lt;script></code> or <code>&lt;style></code>.
                                </p>

                                <p>
                                    <strong>Style</strong> is a regular <code>&lt;style></code> tag and includes CSS
                                    which is
                                    output with this component. To avoid collisions, styles should be appropriately
                                    prefixed (corresponding to an <code>id</code> or <code>class</code> on the top level
                                    markup
                                    element above).
                                </p>

                                <p>
                                    <strong>Code</strong> is Go language code which is copied verbatim into the final
                                    .go file.
                                    It is put into a script tag with a specific content type, like so:</p>
                                <div vg-html='showCode("html",`<script type="application/x-go">
// Go code here
</script>`)'></div>
                                <p>
                                    Note that JavaScript is not supported, only Go code. There can be only one.
                                </p>

                            </article>

                            <article class="col-md-8 content-body"
                                     vg-if='allPages.FindByPathOrEmpty(data.Router.Path()).Path=="/doc/files/markup"'>


                                <p>
                                    The Markup section is an element which has the HTML that is displayed for this file
                                    (each file is a "component",
                                    following the parlance of other UI libraries).
                                </p>

                                <p>In addition to regular HTML, some specific attributes have special meaning in Vugu
                                    and allow you to introduce
                                    logic into your component's display.
                                </p>

                                <div class="alert alert-warning" role="alert">
                                    <i class="icon-alert-circle"></i>
                                    <h4 class="fs-22">Tip</h4>
                                    <p>Component files are parsed first using a regular HTML parser, before any Go
                                        expressions are considered.
                                        As such, using single quotes when writing attribute values can help with HTML
                                        escaping issues.
                                        For example, you can write <code>&lt;div vg-if='myvar == "myval"'></code> or
                                        <code>&lt;div vg-if="myvar == &amp;#34;myval&amp;#34;"></code>, but the former
                                        is easier to read. </p>
                                </div>

                                <h3>Conditionals with <code>vg-if</code></h3>

                                <p>
                                    You can choose a condition for an element to be displayed using <code>vg-if='condition'</code>.
                                    The
                                    condition is regular Go code and during code generation is put directly between
                                    <nobr><code>if</code> and <code>{</code></nobr>
                                    in the resulting .go file. While the expression itself can be any valid Go code for
                                    an if statement,
                                    a common case is to reference a member variable of your
                                    <a href="/doc/components" @click='data.Router.BrowseTo("/doc/components", event)'>Component</a>'s
                                    Data struct.
                                    For example:
                                </p>
                                <div vg-html='showCode("html",`<div>
    <p vg-if=&apos;data.ShowText&apos;>
        Conditional text here.
    </p>
</div>

<script type="application/x-go">
type RootData struct { // component data for "root"
    ShowText bool
}
</script>`)'></div>

                                <h3>Loops with <code>vg-for</code></h3>

                                <p>Loops correspond directly to <code>for</code> blocks in Go code. All forms of loops
                                    are supported
                                    including the <code>init; condition; post</code> syntax as well as
                                    <code>range</code> expressions.
                                    For example:
                                </p>

                                <div vg-html='showCode("html",`<div>
    <p vg-for=&apos;i := 0; i < 10; i++&apos;>
        <div vg-html="i"></div>
    </p>
</div>`)'></div>

                                <div vg-html='showCode("html",`<div>
    <p vg-for=&apos;_, item := range data.Items&apos;>
        <div vg-html="item"></div>
    </p>
</div>

<script type="application/x-go">
type RootData struct { // component data for "root"
    Items []string
}
</script>`)'></div>

                                <p>Note that the vg-html attribute outputs the value as HTML, using
                                    <code>fmt.Sprint()</code>, see below.</p>

                                <p>
                                    As a special case and for convenience, if the expression contains no whitespace it
                                    will be expanded to
                                    <code>for key, value := range expr { _, _ = key, value; ...</code>. Example:
                                </p>

                                <div vg-html='showCode("html",`<div>
    <p vg-for=&apos;data.Items&apos;>
        <div>
          Key: <span vg-html="key"></span>
          Value: <span vg-html="value"></span>
        </div>
    </p>
</div>

<script type="application/x-go">
type RootData struct { // component data for "root"
    Items []string
}
</script>`)'></div>

                                <h3>Raw HTML with <code>vg-html</code></h3>

                                <p>The vg-html attribute is used to output an expression as HTML into the contents of an
                                    element.
                                    (It corresponds to the <a target="_blank"
                                                              href="https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML">innerHTML</a>
                                    property.)
                                    The expression converted to a string using
                                    <a target="_blank" href="https://golang.org/pkg/fmt/#Sprint">fmt.Sprint()</a>.
                                    Example:
                                </p>

                                <div vg-html='showCode("html",`<div>
    <p vg-html=&apos;"<b>an HTML string</b>"&apos;>
    <p vg-html=&apos;123&apos;> &lt;!-- will be output according to fmt.Sprint rules -->
    <p vg-html=&apos;html.EscapeString("escaping & arbitrary text is easy like so")&apos;>
</div>

<script type="application/x-go">
import "html"
</script>`)'></div>

                                <p>
                                    You may use variable names declared in earlier constructs (such as <code>key</code>
                                    or <code>value</code> from a for/range loop).
                                    Regular Go variable scoping rules apply, where each nested DOM element is equivalent
                                    to a Go <code>{</code> code block <code>}</code>.
                                </p>

                                <h3>Dynamic Attributes with <code>:</code></h3>

                                <p>
                                    The values of HTML attributes can be made dynamic and accept Go expressions.
                                    Dynamically changing attribute values has many uses such as applying CSS dynamically
                                    styles with the class attribute.
                                </p>

                                <div vg-html='showCode("html",`<div>
    <p :style=&apos;"background:"+data.BgColor&apos;></p>
</div>

<script type="application/x-go">
type RootData struct {
  BgColor string // e.g. "blue"
}
</script>`)'></div>

                                <p>
                                    You may use variable names declared in earlier constructs (such as <code>key</code>
                                    or <code>value</code> from a for/range loop).
                                    Regular Go variable scoping rules apply, where each nested DOM element is equivalent
                                    to a Go <code>{</code> code block <code>}</code>.
                                </p>

                                <p>Note that in addition to the above use, dynamic attributes are frequently used in
                                    conjuction with
                                    components, where the attributes
                                    become properties that are passed into a component when it is instantiated. In this
                                    case,
                                    the attributes are not converted to strings but are kept as regular Go values (store
                                    as <code>interface{}</code>). See the
                                    <a href="/doc/components" @click='data.Router.BrowseTo("/doc/components", event)'>Components</a>
                                    page for more info.
                                </p>

                                <h3>DOM Events with <code>@</code></h3>

                                <p>Event handlers can be attached to HTML elements (à la
                                    <a target="_blank"
                                       href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener">addEventListener</a>)
                                    using special attributes prefixed with an @ symbol.
                                </p>

                                <p>The attribute name after the @ indicates the event name, e.g. "click". The attribute
                                    value must be a Go function/method
                                    call. Other Go statements are not currently allowed. The arguments to the function
                                    call can be anything valid in Go,
                                    including literals.</p>
                                <p>Note that these values must hash properly with
                                    <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#ComputeHash">ComputeHash()</a>,
                                    as this is needed by Vugu
                                    to keep track of its events internally. Most primitive types that just store data
                                    are fine, but please, no channels.
                                </p>
                                <p>
                                    You may use variable names declared in earlier constructs (such as <code>key</code>
                                    or <code>value</code> from a for/range loop).
                                    Regular Go variable scoping rules apply, where each nested DOM element is equivalent
                                    to a Go <code>{</code> code block <code>}</code>.
                                    The special variable <code>event</code> which is of type
                                    <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#DOMEvent">*vugu.DOMEvent</a>
                                    can be used a placeholder and is replaced when the method is invoked with an
                                    appropriate event object.
                                    See <a href="/doc/dom-events"
                                           @click='data.Router.BrowseTo("/doc/dom-events", event)'>DOM Events</a> for
                                    more info.
                                    Example:
                                </p>

                                <div vg-html='showCode("html",`<div>
    <div vg-if=&apos;data.Show&apos;>I am here!</div>
    <button @click=&apos;data.Toggle()&apos;>Toggle me Silly</button>
</div>

<script type="application/x-go">
func (data *RootData) Toggle() { data.Show = !data.Show }
type RootData struct {
  Show bool
}
</script>`)'></div>

                                <h3>Special Variable Names</h3>

                                <p>
                                    Several variable names have special meaning and are useful when writing .vugu files:
                                </p>

                                <ul>
                                    <li><code>data</code> - Refers to the instance of your Component.
                                        It is typically
                                        a struct pointer. This is the proper place to house the state of your component.
                                        By default this is an empty struct but it is common to create your own struct
                                        with
                                        the data you need on it. See more at <a href="/doc/components"
                                                                                @click='data.Router.BrowseTo("/doc/components", event)'>Components</a>
                                    </li>
                                    <li><code>comp</code> - Refers to the component type. Unless you write something
                                        specific for this it will be an empty struct. However it can be useful if you
                                        need to
                                        store configuration info that is determined at app startup and is the same for
                                        each
                                        instance of a component.
                                    </li>
                                    <li><code>event</code> - This is a placeholder for a
                                        <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#DOMEvent">*vugu.DOMEvent</a>
                                        instance that is
                                        created when a DOM event is triggered and your handler is called. This also
                                        provides
                                        some other needed functionality such as the
                                        <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#EventEnv">EventEnv</a>,
                                        which is important for synchronizing
                                        goroutines that need to update data after an event completes. See more at
                                        <a href="/doc/dom-events"
                                           @click='data.Router.BrowseTo("/doc/dom-events", event)'>DOM Events</a>.
                                    </li>
                                    <li><code>key</code> and <code>value</code> - See section covering vg-for above.
                                        These are the
                                        default names used for implied range expressions.
                                </ul>

                                <p>Please note that variables that your code declares, e.g. in a vg-for loop, should not
                                    end with an underscore in order
                                    to avoid conflicting with generated code.
                                </p>

                            </article>

                            <article class="col-md-8 content-body"
                                     vg-if='allPages.FindByPathOrEmpty(data.Router.Path()).Path=="/doc/files/style"'>

                                <p>Style blocks are simply a way to express CSS that corresponds to your component and
                                    is output
                                    along with your component markup. Example:</p>

                                <div vg-html='showCode("html",`<div class="some-component-here">
    <strong>"Fashions fade, style is eternal."</strong> —Yves Saint Laurent
</div>

<style>
.some-component-here strong {
  color: #7c5a9e;
}
</style>`)'></div>


                                <p>
                                    A few words of widsom and caution regarding style blocks:
                                <ul>
                                    <li>
                                        It is good practice to <strong>prefix your styles</strong> and make them
                                        correspond to your component's main HTML element -
                                        either a <strong>class</strong> or <strong>id</strong>. In the example above you
                                        can see we use <code>.some-component-here</code>
                                        as a prefix to avoid style collisions. Generally, using the exact component name
                                        (the name of the .vugu file minus the extension)
                                        is a good way to go.
                                    </li>
                                    <li><strong>Styles are deduplicated</strong> as literal strings of the entire
                                        contents of the <code>&lt;style></code> tag,
                                        so only one of the same block of styles is ever output.
                                    </li>
                                    <li>
                                        <strong>Styles are inserted in one place at the top of the root
                                            component</strong> and in the order that components are
                                        rendered. This usually produces the right effect but it's worth knowing when you
                                        are debugging style issues.
                                    </li>
                                    <li>You probably do <strong>not want to use @import to load external style
                                            sheets.</strong>
                                        If your component is shown and then
                                        hidden and shown again it will cause the import to be removed from the page and
                                        then re-added and
                                        most likely your browser will load the stylesheet again. For styles which should
                                        always be
                                        present, it is better to add them to the overall page markup outside of the root
                                        component. <!-- TODO link to where this is documented -->
                                    </li>
                                    <li>
                                        Go expressions or other <strong>dynamic elements are not currently supported in
                                            styles</strong>.
                                        It is entirely possible such functionality will be added in the future if it can
                                        be made to work cleanly.
                                    </li>
                                </ul>

                            </article>

                            <article class="col-md-8 content-body"
                                     vg-if='allPages.FindByPathOrEmpty(data.Router.Path()).Path=="/doc/files/code"'>

                                <p>
                                    Go code can be included in your component with in a
                                    <nobr><code>&lt;script type="application/x-go"></code></nobr>
                                    tag.
                                    This code is copied from your .vugu file into the resulting code generated .go file.
                                    It is the appropriate place to include structs, methods and imports needed by
                                    your component.
                                </p>

                                <div class="alert alert-warning" role="alert">
                                    <i class="icon-alert-circle"></i>
                                    <h4 class="fs-22">Tip: Script Tag Alternative</h4>
                                    <p>Because Go packages impose few limits on which code may be put into which file,
                                        you are not required to use a
                                        <nobr><code>&lt;script type="application/x-go"></code></nobr>
                                        tag and it works just as well to place this code in a separate file.
                                    </p>
                                    <p>If you want to do this, the suggested naming convention is
                                        <nobr><strong>component-name-<em>data</em>.go</strong>.</nobr>
                                    </p>
                                    <p>For <strong>root.vugu</strong>, you could place your corresponding Go code in
                                        <nobr><strong>root-data.go</strong>.</nobr>
                                    </p>
                                    <p>For <strong>some-component.vugu</strong> you could place your corresponding Go
                                        code in
                                        <nobr><strong>some-component-data.go</strong></nobr>
                                    </p>
                                </div>

                                <p>
                                    For every component there are two structs which must be defined.
                                    One which implements
                                    <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#ComponentType">ComponentType</a>,
                                    and one which is the "data"
                                    for your component.
                                    If you do not define them
                                    in your Go code block the code generator will output empty structs
                                    and missing methods for you (as a convenience
                                    to make it easy to rapidly create simple components).
                                </p>

                                <p>
                                    Most components will use the Go code block to, aside from adding import statements,
                                    define the data struct for their component and add any needed methods to it.
                                </p>

                                <p>
                                    In writing Go code blocks in your components, it is important to observe the
                                    following
                                    naming conventions:
                                <ul>
                                    <li class="pb-2"><strong>component-name.vugu</strong> results in a code generated
                                        file called <strong>component-name.go</strong> in the same directory
                                    </li>
                                    <li class="pb-2"><strong>component-name.vugu</strong> implies a struct called
                                        <strong>ComponentName</strong> which corresponds to the type of the component,
                                        and a struct called <strong>ComponentNameData</strong>, which is the data for
                                        each instance of the component.<br/>&nbsp;
                                    </li>
                                    <li><strong>ComponentNameData</strong> is normally where you want to add data and
                                        methods.<br/>&nbsp;
                                    </li>
                                </ul>
                                </p>

                                <p>
                                    Let's take a look at a working example of a component that makes more use of the Go
                                    code
                                    section and see all of this work together. This example shows a button which, when
                                    clicked,
                                    will cause the browser to fetch data from the
                                    <a target="_blank" href="https://www.coindesk.com/api">CoinDesk Bitcoin Price Index
                                        API</a>, parse
                                    the result, and display it.
                                </p>
                                <p>root.vugu:</p>

                                <div vg-html='showCode("html",`<div class="demo">
    <div vg-if=&apos;data.isLoading&apos;>Loading...</div>
    <div vg-if=&apos;len(data.bpi.BPI) > 0&apos;>
        <div>Updated: <span vg-html=&apos;data.bpi.Time.Updated&apos;></span></div>
        <ul>
            <li vg-for=&apos;data.bpi.BPI&apos;>
                <span vg-html=&apos;key&apos;></span> <span vg-html=&apos;fmt.Sprint(value.Symbol, value.RateFloat)&apos;></span>
            </li>
        </ul>
    </div>
    <button @click="data.HandleClick(event)">Fetch Bitcoin Price Index</button>
</div>

<script type="application/x-go">
import "encoding/json"
import "net/http"
import "log"

type RootData struct {
    bpi bpi
    isLoading bool
}

type bpi struct {
    Time struct { Updated string `+"`"+`json:"updated"`+"`"+` } `+"`"+`json:"time"`+"`"+`
    BPI map[string]struct { Code string `+"`"+`json:"code"`+"`"+`; Symbol string  `+"`"+`json:"symbol"`+"`"+`; RateFloat float64 `+"`"+`json:"rate_float"`+"`"+` } `+"`"+`json:"bpi"`+"`"+`
}

func (data *RootData) HandleClick(event *vugu.DOMEvent) {

    data.bpi = bpi{}

    ee := event.EventEnv()

    go func() {

        ee.Lock()
        data.isLoading = true
        ee.UnlockRender()
        
        res, err := http.Get("https://api.coindesk.com/v1/bpi/currentprice.json")
        if err != nil {
            log.Printf("Error fetch()ing: %v", err)
            return
        }
        defer res.Body.Close()

        var newb bpi
        err = json.NewDecoder(res.Body).Decode(&newb)
        if err != nil {
            log.Printf("Error JSON decoding: %v", err)
            return
        }

        ee.Lock()
        defer ee.UnlockRender()
        data.bpi = newb
        data.isLoading = false

    }()
}

</script>`)'></div>

                                <ul class="pt-2">
                                    <li class="pb-2">
                                        <strong>Since this example lives in root.vugu, the data struct is called
                                            RootData</strong>.
                                        (And for example in a component in file sample-comp.vugu, this would be
                                        SampleCompData.)
                                        This is where a component's instance data is stored.
                                    </li>
                                    <li class="pb-2">
                                        <strong>On RootData we have a variable called isLoading</strong> of type <code>bool</code>.
                                        This provides a simple way to <code>vg-if</code> a div, which then shows only
                                        during loading.
                                        (More below on how <code>isLoading</code> is updated.)
                                    </li>
                                    <li class="pb-2">
                                        <strong>A struct <code>bpi</code> is defined</strong> for the data we're getting
                                        from the API call. This makes it easy
                                        to read and display. Remember, components are converted to <strong>regular Go
                                            code</strong>, and
                                        heeding the fact that your code runs in the browser, many of the usual
                                        approaches you would do
                                        in any Go program apply here.
                                    </li>
                                    <li class="pb-2">
                                        <strong>We're looping over one of the members of <code>bpi</code></strong> using
                                        <code>vg-for</code> in our markup to display each individual
                                        item returned.
                                    </li>
                                    <li class="pb-2">
                                        <strong>A handler for the DOM click event</strong> is enabled with
                                        <code>@click</code>. Notice that the method
                                        it calls is a member of <code>data</code> (of type <code>*RootData</code>). This
                                        call does not
                                        have to be to a methd on <code>data</code>, but this is the most common case.
                                    </li>
                                    <li class="pb-2">
                                        <strong>When the click handler is invoked, we start a goroutine</strong> to
                                        fetch data from the server in the background.
                                        It is important we don't block here and return from this method quickly.
                                    </li>
                                    <li class="pb-2">
                                        <strong>The EventEnv is used to synchronize access</strong> to data, and works
                                        well from goroutines. When we modify
                                        any information on <code>data</code> or that could potentially have concurrency
                                        issues, you can use <code>EventEnv.Lock()</code>
                                        to get an exclusive lock, and <code>EventEnv.UnlockRender()</code> to release
                                        the lock and tell render loop that the page needs
                                        to be updated.
                                        See <a href="/doc/dom-events"
                                               @click='data.Router.BrowseTo("/doc/dom-events", event)'>DOM Events</a>
                                        for more info.
                                    </li>

                                </ul>

                                <!-- <p>
                                  As you can see ... if, for, html, bound properties, DOM events, data struct holds the state.
                                  a goroutine gatches data in the background (under the hood this correponds to fetch),
                                  and uses EventEnv() to synchronize access to data.
                                </p> -->

                                <!--
                                <p>
                                  code should cover:

                                  mention Comp struct, CompData struct, NewData method, in brief, with link to components page
                                  events in brief with link to dom events page

                                </p>
                                -->

                            </article>

                            <article class="col-md-8 content-body"
                                     vg-if='allPages.FindByPathOrEmpty(data.Router.Path()).Path=="/doc/program"'>

                                <p>Vugu takes a number of steps to make the development process easy to rapidly
                                    get started and prototype user interfaces. That said, it's important to
                                    understand the overall preogram structure and how a Vugu program works (at least by
                                    default), so you can customize it to your needs when building a sophisticated
                                    application. The basics are fairly simple.
                                </p>

                                <p>
                                    When you use the HTTP handler in development mode (as shown on the
                                    <a href="/doc/start" @click='data.Router.BrowseTo("/doc/start", event)'>Getting
                                        Started</a> page), upon page load
                                    Vugu will convert your .vugu files into .go and also by default attempt to generate
                                    a main_wasm.go if it does not exist.
                                    (You can edit main_wasm.go as needed. It is only a template to get your started.
                                    Vugu will not overwrite it.)
                                </p>

                                <h2>WebAssembly main()</h2>

                                <p>
                                    Like any Go program, it starts with <code>main()</code>. The build constraint at the
                                    top (see
                                    Dual Build below) indicates this is the WebAssembly entry point:
                                </p>

                                <div vg-html='showCode("go",`// +build wasm

package main

import (
	// ...
	"github.com/vugu/vugu"
)

func main() {`)'></div>


                                <!--
                                <p>TODO: we need to explain key concepts here like the rneder loop and touch upon lock with EventEnv -
                                  maybe not the deep dive through every line.  Also touch upon the build tags producing two programs - one for wasm
                                  and one that's the server (default setup, normal GO package and module system applies and we're not doing
                                  anything that isn't standard Go.)

                                  An example of http.Get and the locking should probably go here
                                </p>
                                -->

                                <!--
                                <h2>Main</h2>

                                <p>
                                  Here is an example of a working <code>main.go</code>:
                                </p>

                                <p><pre><code>// +build wasm

              package main

              import (
                  "log"
                  "os"

                  "github.com/vugu/vugu"
              )

              func main() {

                  println("Entering main()")
                  defer println("Exiting main()")

                  rootInst, err := vugu.New(&Root{}, nil)
                  if err != nil {
                      log.Fatal(err)
                  }

                  env := vugu.NewJSEnv("#root_mount_parent", rootInst, vugu.RegisteredComponentTypes())
                  env.DebugWriter = os.Stdout

                  for ok := true; ok; ok = env.EventWait() {
                      err = env.Render()
                      if err != nil {
                          panic(err)
                      }
                  }

              }
              </code></pre></p>
              -->

                                <!--
                                <p>That's a fair bit to take in.  Let's go through each part.</p>

                                <p>
                                  The first line is a <a target="_blank" href="https://golang.org/pkg/go/build/#hdr-Build_Constraints">build tag</a>,
                                  indicating that this program should only be compiled for WebAssembly:
                                  <pre><code>// +build wasm</code></pre></p>

                                <p>Program Overview (incl: Render loop)</p>
                                -->

                                <h2>Root Component</h2>

                                <p>To render a page to HTML, you need to have "root" component. This is the top level
                                    component that
                                    houses everything else. By default this component lives in root.vugu, gets code
                                    generated to
                                    root.go, which has a Root struct (the component type) and RootData struct (the
                                    component's instance data).
                                    <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#New">vugu.New</a>
                                    accepts a
                                    <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#ComponentType">ComponentType</a>
                                    (<code>Root</code>)
                                    and a <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#Props">vugu.Props</a>
                                    (<code>nil</code> in this case) and returns an
                                    instance that we can use. Like so:
                                </p>

                                <div vg-html='showCode("go",`rootInst, err := vugu.New(&Root{}, nil)
if err != nil {
	log.Fatal(err)
}`)'></div>

                                <h2>JSEnv</h2>

                                <p>Once we have a root component instance, we need an environment. There are two
                                    environments currently implemented:
                                    <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#JSEnv">JSEnv</a>
                                    for use in WebAssembly applications, and
                                    <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#StaticHTMLEnv">StaticHTMLEnv</a>
                                    which can be used for server-side rendering and tests. JSEnv is what performs the
                                    syncing of the virtual DOM from
                                    by our root component and any nested components to the browser DOM. But before that
                                    happens, we need to create
                                    an instance:
                                </p>

                                <div vg-html='showCode("go",`env := vugu.NewJSEnv("#root_mount_parent",
	rootInst, 
	vugu.RegisteredComponentTypes())`)'></div>

                                <p>
                                <ul>
                                    <li class="pb-2">
                                        The first argument is the location in the page (CSS selector, readable by
                                        <a target="_blank"
                                           href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector">querySelector</a>)
                                        of where the component is "mounted". By default <code>#root_mount_parent</code>
                                        corresponds to
                                        a <code>&lt;div></code> immediately inside the <code>&lt;body></code> tag.
                                    </li>
                                    <li class="pb-2">The second argument is the
                                        component instance we created above.
                                    </li>
                                    <li>
                                        And the last argument is a map of which component types are available
                                        under which names. The function
                                        <a target="_blank"
                                           href="https://godoc.org/github.com/vugu/vugu#RegisteredComponentTypes">vugu.RegisteredComponentTypes</a>
                                        will retreive all of the components that have
                                        registered themselves with
                                        <a target="_blank"
                                           href="https://godoc.org/github.com/vugu/vugu#RegisterComponentType">vugu.RegisterComponentType</a>
                                        (which is the case for all components by default).
                                        This makes it so you can simply <code>import _ "path/to/other/components"</code>
                                        and they will be
                                        available automatically. Components defined directly in your main package are
                                        also always available by default.
                                    </li>
                                </ul>
                                </p>
                                <p>If you need more control over which component types are available during rendering
                                    and the names
                                    they use, or where your application is output on the page, customizing what you pass
                                    to <code>NewJSEnv</code> is the way to do it.
                                </p>

                                <h2>Render Loop</h2>

                                <p>The render loop is where the magic happens. Your components' virtual DOM output (see
                                    <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#ComponentType">ComponentType.BuildVDOM</a>)
                                    is generated and synchronized with
                                    the browser's DOM to give you a matching HTML page. This involves various
                                    optimizations including keeping hashes
                                    of various pieces of information during rendering so it can cache the result and
                                    reduce both compution and
                                    the number of calls into the browser to synchronize DOM.
                                </p>

                                <div vg-html='showCode("go",`for ok := true; ok; ok = env.EventWait() {
  err = env.Render()
  if err != nil {
    panic(err)
  }
}`)'></div>

                                <p>
                                    This will call <code>env.Render()</code> immediately the first time and then wait
                                    for
                                    <code>env.EventWait()</code> to return and render again.
                                </p>

                                <!-- <h2>The Render Loop and DOM Events</h2> -->

                                <div class="alert alert-warning" role="alert">
                                    <i class="icon-alert-circle"></i>
                                    <h4 class="fs-22">Important Note</h4>
                                    <p>When
                                        <a href="/doc/dom-events"
                                           @click='data.Router.BrowseTo("/doc/dom-events", event)'>DOM Events</a>
                                        are handled, a (write) lock is acquired against the environment automatically
                                        and then released when your event handler returns. When things that would block
                                        (like fetching
                                        data from the server over HTTP) need to be done, this must be run in a goroutine
                                        which uses
                                        <a target="_blank"
                                           href="https://godoc.org/github.com/vugu/vugu#DOMEvent.EventEnv">event.EventEnv()</a>
                                        to acquire their own lock before modifying any component data, to ensure they
                                        don't interfere with the render loop or other code.
                                        Locking should only be done during data modification and then unlocked
                                        immediately afterward. <strong>Do not put a
                                            <code>Lock()</code> before <code>http.Get()</code> or other such
                                            <a target="_blank"
                                               href="https://en.wikipedia.org/wiki/Blocking_(computing)">blocking</a>
                                            calls.</strong> Instead <code>Lock()</code> after
                                        you have your data and before updating
                                        the state of your component.
                                        <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#EventEnv">EventEnv.UnlockRender()</a>
                                        will cause the <code>env.EventWait()</code> call above to return and update the
                                        page.
                                        (Whereas <a target="_blank"
                                                    href="https://godoc.org/github.com/vugu/vugu#EventEnv">EventEnv.UnlockOnly()</a>
                                        will release the lock but not cause the page update. This is useful if
                                        you need to do several updates to data at different times
                                        but only care to refresh the page after they are all done.)
                                        See <a href="/doc/files/code"
                                               @click='data.Router.BrowseTo("/doc/files/code", event)'>Code</a> for a
                                        correct example.</p>
                                </div>


                                <!-- <p>When
                                    <a href="/doc/dom-events" @click='data.Router.BrowseTo("/doc/dom-events", event)'>DOM Events</a>
                                    are handled, a (write) lock is acquired against the environment automatically
                                  and then released when your event handler returns.  When things that would block (like fetching
                                  data from the server over HTTP) need to be done, this must be run in a goroutines which must use
                                  <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#DOMEvent.EventEnv">event.EventEnv()</a>
                                  to acquire their own lock to ensure they don't interfere with the render loop or other code.
                                  <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#EventEnv">EventEnv.UnlockRender()</a>
                                  will cause the <code>env.EventWait()</code> call above to return and update the page.
                                  (Whereas <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#EventEnv">EventEnv.UnlockOnly()</a>
                                  will release the lock but not cause the page update. This is useful if
                                  you need to do several updates at different times but only care to refresh the page after they are all done.)
                                </p> -->

                                <p><code>EventWait</code> will return false if it detects something wrong with the
                                    environment
                                    and the program should exit.
                                    This should release any resources and be a clean exit from the program when the page
                                    goes away.
                                </p>

                                <h2>The Dual-Build Approach</h2>

                                <p>The discussion above is only about the WebAssembly side of your application.</p>

                                <p>
                                    Using Go's <a href="https://golang.org/pkg/go/build/#hdr-Build_Constraints">build
                                        constraints</a>
                                    it is easy to output two different executables from your same package directory.
                                    The common case is that you want a client-side build that compiles to WebAssembly
                                    (as discussed above),
                                    as well as a server-side executable to act as a web server. These each need
                                    different
                                    main() and likely other functions, but your components and other functionality
                                    should
                                    be available both in your WebAssembly output and in your server program.
                                </p>

                                <p>
                                    This is why the <code>main()</code> function for your client-side application lives
                                    in
                                    <em>main_wasm.go</em>. The "_wasm" part indicates that the file should be included
                                    during
                                    a WebAssembly build. You can and should include a server-side <code>main()</code> in
                                    another file
                                    and use
                                    <nobr><code>// +build !wasm</code></nobr>
                                    at the top as the inverse build constraint.
                                    See <a href="/doc/build-and-dist"
                                           @click='data.Router.BrowseTo("/doc/build-and-dist", event)'>Building and
                                        Distribution</a>
                                    for more info.
                                </p>

                            </article>

                            <article class="col-md-8 content-body"
                                     vg-if='allPages.FindByPathOrEmpty(data.Router.Path()).Path=="/doc/dom-events"'>

                                <!-- <p>DOM events</p> -->

                                <p>Using the browser's
                                    <a target="_blank"
                                       href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">Document
                                        Object Model (DOM)</a>,
                                    <a target="_blank"
                                       href="https://developer.mozilla.org/en-US/docs/Web/Events">events</a> can be
                                    attached to HTML elements by providing an attribute of the event name
                                    prefixed with <code>@</code>. For example
                                    <nobr><code>&lt;div @click='data.HandleClick()'></code></nobr>
                                </p>

                                <p>The name of the event correspoonds to a regular DOM event as would be provided to
                                    <a target="_blank"
                                       href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener">addEventListener</a>.
                                </p>

                                <p>The Go expression provided must be a Go method
                                    call. The method name must be exported (begin with an upper case letter). Other Go
                                    statements are not currently allowed. The arguments to the function call can be
                                    anything valid in Go,
                                    including literals.</p>

                                <div vg-html='showCode("html",`<div>
    <div vg-if=&apos;data.Show&apos;>I am here!</div>
    <button @click=&apos;data.Toggle()&apos;>Toggle me Silly</button>
</div>

<script type="application/x-go">
func (data *RootData) Toggle() { data.Show = !data.Show }
type RootData struct {
  Show bool
}
</script>`)'></div>


                                <ul>
                                    <li class="pb-2">
                                        <strong>The special variable <code>event</code></strong> (of type
                                        <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#DOMEvent">*vugu.DOMEvent</a>)
                                        corresponds to the event data sent to us by the browser. It also provides some
                                        useful functionality
                                        such as a <code>PreventDefault()</code> method which corresponds to
                                        <a target="_blank"
                                           href="https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault">preventDefault</a>
                                    </li>
                                    <li class="pb-2">
                                        <strong>For operations that involve blocking</strong> (waiting for I/O - such as
                                        fetching data from a URL),
                                        you should create a goroutine and use
                                        <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#EventEnv">event.EventEnv()</a>
                                        to acquire
                                        a lock before modifying data, and release it afterward. <br/>&nbsp;

                                        <div class="alert alert-warning" role="alert">
                                            <i class="icon-alert-circle"></i>
                                            <h4 class="fs-22">Important</h4>
                                            <p>
                                                When your event handler method is called, an exclusive lock is already
                                                acquired
                                                against the rendering environment. It is released automatically when
                                                your handler method exits.
                                                Do not block waiting for I/O inside your handler directly, instead use a
                                                goroutine.
                                                Inside the goroutine (and <strong>only inside goroutines, not directly
                                                    in your handler method</strong>)
                                                you must
                                                use
                                                <a target="_blank"
                                                   href="https://godoc.org/github.com/vugu/vugu#EventEnv"><code>event.EventEnv().Lock()</code></a>
                                                and <code>event.EventEnv().UnlockRender()</code>
                                                (or <code>UnlockOnly()</code>) to ensure only one thing is accessing
                                                your information at a time.
                                                You can also use <code>RLock()</code> and <code>RUnlock()</code> for
                                                read-only access from a goroutine.
                                                These methods behave exactly as you would expect from
                                                <a target="_blank"
                                                   href="https://golang.org/pkg/sync/#RWMutex">RWMutex</a>
                                                and if you have never used one of those, now would be a great time to
                                                bone up on them.</p>
                                        </div>


                                        See <a href="/doc/files/code"
                                               @click='data.Router.BrowseTo("/doc/files/code", event)'>Code</a>
                                        for an example of using a goroutine to fetch data and locking/unlocking when
                                        handling the results.

                                    </li>
                                    <li class="pb-2">
                                        <strong>Note that the method call arguments must hash properly</strong> with
                                        <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#ComputeHash">ComputeHash()</a>,
                                        as this is needed by Vugu
                                        to keep track of its events internally. Most primitive types that just store
                                        data are fine, but please, no channels.
                                    </li>
                                </ul>

                                <!-- <p>
                                  Event handling and event name, *vugu.DOMEvent type
                                  evaluation
                                  do not block the callback method, you should attempt to only do
                                  variable comparisons and assignments and delegate longer running tasks to a goroutine.  this specifically applies to calling http.Get() (which calls the browser's fetch() implementation) and other such calls to retrieve data.
                                  locking, done automatically or EventEnv() for separate gorountines
                                  Show example of processing in background using http.Get()
                                </p> -->

                            </article>

                            <article class="col-md-8 content-body"
                                     vg-if='allPages.FindByPathOrEmpty(data.Router.Path()).Path=="/doc/components"'>

                                <p>
                                    <strong>Components are individual files which are used to organize your user
                                        interface code.</strong>
                                    Each component lives in a .vugu file. Each .vugu file is processed to produce
                                    a .go file. Like all Go code, each directory is a package and you may add
                                    additional .go files to it and use them as part of your component.
                                    Vugu does some
                                    code generation, but otherwise does not interfere with the regular Go build
                                    process at all.
                                </p>

                                <p>
                                    Under the hood, components implement the
                                    <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#ComponentType">ComponentType</a>
                                    interface. Although this is
                                    unimportant to most developers as the code generator does the work to
                                    implement it based on your .vugu file.
                                </p>

                                <p>
                                    By default, the component named <strong>root</strong> (and thus living in root.vugu)
                                    <strong>is the top
                                        level component</strong> and is rendered just inside the <code>&lt;body></code>
                                    tag on your page.
                                    In this case, there is only one instance of your root component, which is created in
                                    your <code>main()</code> function.
                                    (If you've followed the
                                    <a href="/doc/files/start" @click='data.Router.BrowseTo("/doc/files/start", event)'>Getting
                                        Started</a>
                                    instructions you can find this code in main_wasm.go)
                                </p>

                                <p>
                                    Things get interesting when we introduce the idea of <strong>multiple
                                        components</strong> into an application.
                                    Each component goes in it's own .vugu file. Use at least one hyphen to avoid name
                                    conflicts with regular
                                    HTML tags.
                                </p>

                                <p>
                                    One component can include an <strong>HTML tag with the name of another
                                        component</strong>.
                                    When this happens, it indicates than an instance
                                    of this other component should be created. Let's look at an example:
                                </p>

                                <div vg-html='showCode("html",`<!-- root.vugu -->
<div class="root">
    <ul>
      <my-line file-name="example.txt" :line-number="rand.Int63n(100)" />
    </ul>
</div>

<script type="application/x-go">
import "math/rand"
</script>
`)'></div>

                                <div vg-html='showCode("html",`<!-- my-line.vugu -->

<li class="my-line">
  <strong vg-html=&apos;data.FileName&apos;></strong>:<span vg-html=&apos;data.LineNumber&apos;></span>
</li>

<script type="application/x-go">
type MyLineData struct {
  FileName string
  LineNumber int
}
func (comp *MyLine) NewData(props vugu.Props) (interface{}, error) { 
  ret := &MyLineData{}
  ret.FileName, _ = props["file-name"].(string)
  ret.LineNumber, _ = props["line-number"].(int)
  return ret, nil
}
</script>`)'></div>

                                <p>In this case the <code>&lt;my-line></code> tag gets replaced with the
                                    <code>&lt;li></code> tag and its contents as
                                    rendered by the my-line component.
                                </p>

                                <p>
                                    As shown in the example, the HTML attributes of the tag are passed as properties
                                    (<a target="_blank"
                                        href="https://godoc.org/github.com/vugu/vugu#Props">vugu.Props</a>, which is
                                    just a
                                    <code>map[string]interface{}</code>) to the component instance.
                                    Attributes with a colon (<code>:</code>)
                                    will be evaluated as Go code and then the result passed as-is (not converted in any
                                    way).
                                    This allows you to pass arbitrarily complex data, or pointers, etc. into components
                                    if needed.
                                </p>

                                <p>
                                    The <code>NewData</code> method on the component type is responsible for reading the
                                    props
                                    passed into it and populating the data struct for this component instance.
                                    (This method is part of satisfying the
                                    <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#ComponentType">ComponentType</a>
                                    interface.)
                                </p>

                                <p>
                                    Components can be instantiated as many times as needed. Each one causes a new
                                    instance
                                    to be created. Like so:
                                </p>

                                <div vg-html='showCode("html",`<!-- root.vugu -->

<div class="root">
    <ul>
      <my-line vg-for=&apos;i := 0; i < 10; i++&apos; 
        file-name="example.txt" :line-number="i" />
    </ul>
</div>
`)'></div>

                                <p>
                                    Vugu needs a way to determine, when re-rendering the HTML, which components are the
                                    same and which
                                    are now different and should be re-created. This is determined by calling
                                    <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#ComputeHash">ComputeHash</a>
                                    on the attributes (including dynamically evaluted/colon prefixed ones after
                                    evaluation) and if the hash
                                    is different a new instance is created. If it's the same, the same one is re-used.
                                </p>

                                <p>
                                    Any component can include any other registered component. But if components include
                                    each other
                                    in a loop the behavior is undefined (but I can promise you it won't be good).
                                </p>

                                <div class="alert alert-warning" role="alert">
                                    <i class="icon-alert-circle"></i>
                                    <h4 class="fs-22">Note</h4>
                                    <p>By default components register themselves in an <code>init()</code> function by
                                        calling
                                        <a target="_blank"
                                           href="https://godoc.org/github.com/vugu/vugu#RegisterComponentType">RegisterComponentType</a>.
                                        And by default in <code>main()</code> all registered components are retrieved
                                        and made available.
                                        So you can place <code>import _ "your/package"</code> in any file and if that
                                        package contains components
                                        they will be available for use. This behavior can also easily be changed by
                                        modifying the appropriate
                                        behavior in main_wasm.go, in case you need more control over what components are
                                        available
                                        under what names.</p>
                                </div>

                                <!--
                              <p>
                                talk about the root component

                                component names with a dash

                                NewData method

                                explain props

                                CompData struct, feel free to add fields, per instance
                                methods can and should go on CompData

                                DOM event handling and variable names

                                Component Events (explain difference between DOM events) are planned as a feature.
                              </p>
                              -->

                            </article>

                            <!--
                            <article class="col-md-8 content-body" vg-if='allPages.FindByPathOrEmpty(data.Router.Path()).Path=="/doc/components-in-depth"'>
                              components in depth

                              mention generated BuildVDOM and that you can look at a generated .go file to see, but it's done automatically
                              variables available - comp, data, event

                              explain for loops and bound attributes and how these end up in go code

                              NewData method  and in which cases it's called

                              Comp struct, only one instance for the whole app, corresponds to the component type, can have config here if needed for complex cases, but often this is just empty

                              show component written manually in Go, with all it's parts - comments to show what is auto generated and
                              what would normally be copied from the vugu file

                            </article>
                            -->

                            <article class="col-md-8 content-body"
                                     vg-if='allPages.FindByPathOrEmpty(data.Router.Path()).Path=="/doc/build-and-dist"'>

                                <!-- <p>Building and Distribution</p> -->

                                <p>The development setup described in
                                    <a href="/doc/start" @click='data.Router.BrowseTo("/doc/start", event)'>Getting
                                        Started</a>
                                    is a great way to get going with Vugu. But
                                    when you're ready to move your application to a staging or production environment
                                    (or you need
                                    to do development work on the Go server part of your web application), additional
                                    steps
                                    are in order.
                                </p>

                                <h2>Adding a Server</h2>

                                <p>The server you created on the Getting Started page is only a single file, it does not
                                    compile as part of your application (due to the <code>// +build ignore</code> at the
                                    top).
                                    The main reason for this is that it makes things simpler when you are just hacking
                                    away
                                    on your user interface. If you enter bad code into a .vugu file (which ends up
                                    in a .go file and breaks your build), <code>go run devserver.go</code>
                                    will still run.
                                </p>

                                <p>To make a proper server suitable for staging or production, or to start adding more
                                    server-side functionality to, you'll want to create a server.go file, and place
                                    separate
                                    web server code in here. It is suggested you leave devserver.go where it is and you
                                    can
                                    use it if/when needed, it won't conflict with server.go.
                                </p>

                                <p>Note that server.go looks really similar to devserver.go in the beginning. But
                                    as you add server-side functionality other things to server.go, the need for it
                                    becomes more apparent. We also have some additional command line flags that
                                    are useful for an application running on a server.</p>
                                <p>This example includes a <code>-dev</code> flag to
                                    enable automatically performing Vugu code generation and rebuilding your
                                    wasm (same as devserver.go), which you can turn on and off.
                                    Running without <code>-dev</code>, this can also serve as a viable production
                                    server.
                                    (Obviously you need to be aware of your specific production environment
                                    requirements,
                                    but this will get you pointed in the right direction.)</p>
                                <p>Command line flags for the HTTP listener and the directory to look for files in are
                                    also included. <strong>server.go</strong>:</p>

                                <div vg-html='showCode("go",`// +build !wasm

package main

//go:generate vugugen .

import (
	"flag"
	"log"
	"net/http"
	"os"
	"path/filepath"

	"github.com/vugu/vugu/simplehttp"
)

func main() {
	dev := flag.Bool("dev", false, "Enable development features")
	dir := flag.String("dir", ".", "Project directory")
	httpl := flag.String("http", "127.0.0.1:8877", "Listen for HTTP on this host:port")
	flag.Parse()
	wd, _ := filepath.Abs(*dir)
	os.Chdir(wd)
	log.Printf("Starting HTTP Server at %q", *httpl)
	h := simplehttp.New(wd, *dev)
	log.Fatal(http.ListenAndServe(*httpl, h))
}
`)'></div>

                                <p>
                                    To run this server, you can either build the binary and run it directly, or <code>go
                                        run . -dev</code>
                                    also works.
                                </p>

                                <h2>Making dist.go</h2>

                                <p>
                                    Rather than introducing third party build tools, the suggested approach to
                                    distributing your
                                    application is to create a small file called dist.go (ignored by the rest of your
                                    application)
                                    that you run when you want to build your distribution. The
                                    <a target="_blank"
                                       href="https://godoc.org/github.com/vugu/vugu/distutil">distutil</a> package has
                                    some
                                    convient functions that make this less tedious than it might seem. This approach
                                    also
                                    has the advantage that it works equally well on Windows, Linux and Mac, and without
                                    having to install anything. The Go module system takes care of that for you.
                                </p>

                                <p>Various steps are possible and there is not a one-size-fits-all dist.go. That said,
                                    here's one that will get you started:
                                </p>
                                <ul>
                                    <li class="pb-2">It creates a <strong>"dist" folder, copies the static
                                            files</strong> from your project into it
                                    </li>
                                    <li class="pb-2">It finds and copies <strong>wasm_exec.js</strong></li>
                                    <li class="pb-2">It makes sure <strong>vugugen</strong> is installed</li>
                                    <li class="pb-2">It runs <strong>go generate</strong></li>
                                    <li class="pb-2">It <strong>builds your main.wasm</strong> file</li>
                                    <li>And if desired you can make it <strong>write out an index.html</strong> or build
                                        your <strong>server executable</strong></li>
                                </ul>

                                <div vg-html='showCode("go",`// +build ignore

package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"time"

	"github.com/vugu/vugu/distutil"
)

func main() {

	clean := flag.Bool("clean", false, "Remove dist dir before starting")
	dist := flag.String("dist", "dist", "Directory to put distribution files in")
	flag.Parse()

	start := time.Now()

	if *clean {
		os.RemoveAll(*dist)
	}

	os.MkdirAll(*dist, 0755) // create dist dir if not there

	// copy static files
	distutil.MustCopyDirFiltered(".", *dist, nil)

	// find and copy wasm_exec.js
	distutil.MustCopyFile(distutil.MustWasmExecJsPath(), filepath.Join(*dist, "wasm_exec.js"))

	// check for vugugen and go get if not there
	if _, err := exec.LookPath("vugugen"); err != nil {
		fmt.Print(distutil.MustExec("go", "get", "github.com/vugu/vugu/cmd/vugugen"))
	}

	// run go generate
	fmt.Print(distutil.MustExec("go", "generate", "."))

	// run go build for wasm binary
	fmt.Print(distutil.MustEnvExec([]string{"GOOS=js", "GOARCH=wasm"}, "go", "build", "-o", filepath.Join(*dist, "main.wasm"), "."))

	// STATIC INDEX FILE:
	// if you are hosting with a static file server or CDN, you can write out the default index.html from simplehttp
	// req, _ := http.NewRequest("GET", "/index.html", nil)
	// outf, err := os.OpenFile(filepath.Join(*dist, "index.html"), os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0644)
	// distutil.Must(err)
	// defer outf.Close()
	// template.Must(template.New("_page_").Parse(simplehttp.DefaultPageTemplateSource)).Execute(outf, map[string]interface{}{"Request": req})

	// BUILD GO SERVER:
	// or if you are deploying a Go server (yay!) you can build that binary here
	// fmt.Print(distutil.MustExec("go", "build", "-o", filepath.Join(*dist, "server"), "."))

	log.Printf("dist.go complete in %v", time.Since(start))
}`)'></div>

                                <p>
                                    By dropping the above is dist.go and tuning it, you can run <code>go run
                                        dist.go</code>
                                    and get a <code>dist folder with the distribution of your project</code>, ready for
                                    deployment. And you can of course easily call this from another build/distribution
                                    system,
                                    such as a Dockerfile.
                                </p>

                                <!--
                                .gitignore dist folder

                                server.go should have flag for dev and flag for http listener and flag for main dir, defaulting to "."

                                make sure to include go:generate in server.go

                                <p>need to mention how to set title and meta tags as part of setting up server

                                  actually we need to show two approaches here - one with a dev/prod Go server, along with its
                                  build script

                                  and then an entirely different setup which outputs static HTML to the dist folder,
                                   for use with static file servers, CDNs, etc.

                                   bulleted list for each?
                                </p>
                                -->

                            </article>


                            <!--
                            <article class="col-md-8 content-body">

                              <p>You can change a domain's contact information at any time. Domains have four sets of contacts, which are listed below after the instructions.</p>

                              <div class="alert alert-warning" role="alert">
                                <i class="icon-alert-circle"></i>
                                <h4 class="fs-22">Tip</h4>
                                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos minus, qui error eveniet! Et consequuntur fugit nulla nam</p>
                              </div>

                              <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Id illo eveniet blanditiis aliquam voluptatem quaerat sapiente alias ex pariatur quasi, ipsa dolorem impedit nemo eius, hic est magnam quisquam soluta!</p>


                              <section id="section-1">
                                <h2 class="section-title-2">Quick Start <a data-scroll href="#section-2" class="anchor" data-toggle="tooltip" data-placement="top" title="Copy URL"><i class="icon-hash"></i></a></h2>
                                <ol class="step-list">
                                  <li><div>
                                    <p>Go to the <a href="" class="external">Domains Settings</a> page.</p>
                                  </div></li>
                                  <li><div>
                                    <p>Under Contact Information, click Edit. (Note: if you don't see the Edit link, you may have Domain Privacy turned on. Click the View personal information link, and then you'll be able to click the Edit link.)</p>
                                  </div>
                                    <ol>
                                      <li><div>
                                        <p>To edit All Contacts, enter the Contact, Address, Phone, and Email information you want to update, and then click OK.</p>
                                      </div></li>
                                      <li><div>
                                        <p>To edit each individual contact, clear the Use for all contact types check box and enter the information you want to update.</p>
                                      </div></li>
                                    </ol>
                                  </li>
                                  <li><div>
                                    <p>Click Save</p>
                                  </div></li>
                                </ol>
                              </section>


                              <section id="section-2">
                                <h2 class="section-title-2">Video Preview <a data-scroll href="#section-2" class="anchor" data-toggle="tooltip" data-placement="top" title="Copy URL"><i class="icon-hash"></i></a></h2>
                                <div class="row">
                                  <div class="col-12">
                                    <video
                                      id="video"
                                      class="youtube video-js vjs-default-skin video-16-9"
                                      controls
                                      width="640" height="264"
                                      data-setup='{ "techOrder": ["youtube"], "sources": [{ "type": "video/youtube", "src": "https://www.youtube.com/watch?v=DkeiKbqa02g"}], "youtube": { "ytControls": 2 } }'
                                    >
                                    </video>
                                  </div>
                                </div>
                              </section>


                              <section id="section-3">
                                <h2 class="section-title-2">Typography <a data-scroll href="#section-3" class="anchor" data-toggle="tooltip" data-placement="top" title="Copy URL"><i class="icon-hash"></i></a></h2>
                                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Molestiae debitis dicta, dolorum modi aliquam praesentium, molestias! Quibusdam magni natus eligendi, delectus odit, veritatis dignissimos voluptate dolorum vitae laborum fuga? Facilis.</p>
                                <div class="row gutter-2">
                                  <div class="col-8 col-md-5">
                                    <div class="type boxed">
                                      <div>
                                        <span class="badge badge-primary">New</span>
                                        <h5 class="type-title">Open Sans</h5>
                                        <div class="type-example">
                                          <span>Ab</span>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-8 col-md-5">
                                    <div class="type bordered">
                                      <div>
                                        <h5 class="type-title">Open Sans</h5>
                                        <div class="type-example">
                                          <span>Ab</span>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </section>

                              <section id="section-4">
                                <h2 class="section-title-2">File Tree <a data-scroll href="#section-4" class="anchor" data-toggle="tooltip" data-placement="top" title="Copy URL"><i class="icon-hash"></i></a></h2>
                                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Suscipit magnam exercitationem fugit doloremque ut, neque nobis fuga voluptatum minima officiis iure consectetur nemo maiores, hic qui rem quae dolor dolorem.</p>
                                <div class="row">
                                  <div class="col-md-8">
                                    <div class="bordered p-2 p-md-5">
                                      <ul class="file-tree">
                                        <li class="file-tree-folder empty">Images
                                          <span>description</span>
                                        </li>
                                        <li class="file-tree-folder">CSS
                                          <span>description</span>
                                          <ul>
                                            <li>file name <span>description</span></li>
                                            <li>file name <span>description</span></li>
                                          </ul>
                                        </li>
                                        <li class="file-tree-folder">HTML
                                          <span>description</span>
                                          <ul>
                                            <li class="file-tree-folder">PAGES
                                              <span>description</span>
                                              <ul>
                                                <li>file name <span>description</span></li>
                                                <li>file name <span>description</span></li>
                                                <li>file name <span>description</span></li>
                                              </ul>
                                            </li>
                                            <li>file name <span>description</span></li>
                                            <li>file name <span>description</span></li>
                                          </ul>
                                        </li>
                                        <li>index.html <span>description</span></li>
                                        <li>components.html <span>description</span></li>
                                      </ul>
                                    </div>
                                  </div>
                                </div>
                              </section>

                            </article>
                            -->


                            <!-- / content -->


                            <!-- sidebar -->
                            <aside class="col-md-4 content-aside bg-light">
                                <div class="widget">
                                    <h3 class="widget-title">Documentation</h3>
                                    <div class="list-group list-group-related">

                                        <a vg-for="allPages.SiteDocPages()" :href="value.Path"
                                           @click="data.Router.BrowseTo(value.Path, event)"
                                           class="list-group-item list-group-item-action d-flex align-items-center active">
                                            <i class="fs-20 icon-file-text2 text-primary mr-1"></i>
                                            <span vg-html="value.ShortTitle"></span>
                                        </a>

                                        <!--
                                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center active">
                                          <i class="fs-20 icon-file-text2 text-primary mr-1"></i>
                                          Registering Domain Names
                                        </a>
                                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center active">
                                          <i class="fs-20 icon-file-text2 text-primary mr-1"></i>
                                          What's the difference between a domain and a website?
                                        </a>
                                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center active">
                                          <i class="fs-20 icon-file-text2 text-primary mr-1"></i>
                                          What is protected registration ?
                                        </a>
                                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center active">
                                          <i class="fs-20 icon-file-text2 text-primary mr-1"></i>
                                          Transfer domain to another registrar
                                        </a>
                                        -->
                                    </div>
                                </div>

                            </aside>
                            <!-- / sidebar -->


                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- / sidebar layout -->


    <!-- TODO: this is kinda cool, see if we can hack it in later -->
    <!-- interpost -->
    <section class="bg-dark text-white separator-bottom p-0">
        <div class="container">
            <div class="row gutter-0">
                <div class="col-12 col-md-6">
                    <br/>
                    <!-- <h4 class="interpost interpost-prev"><a href="">Forwarding your incoming support email to Zendesk using Yahoo</a></h4> -->
                </div>
                <div class="col-12 col-md-6 text-right">
                    <!-- interpost-next  - this class was causing some funk, took it out -->
                    <h4 class="interpost "
                        vg-if='nextpg := allPages.FindNextDocPage(data.Router.Path()); nextpg != nil'>
                        <a :href="nextpg.Path" @click='data.Router.BrowseTo(nextpg.Path, event)'
                           vg-html="nextpg.LongTitle"></a>
                    </h4>
                </div>
            </div>
        </div>
    </section>
    <!-- / interpost -->


</section>

