package main

// DO NOT EDIT: This file was generated by vugu. Please regenerate instead of editing or add additional code in a separate file.

import "fmt"
import "reflect"
import "github.com/vugu/vugu"

var _ vugu.ComponentType = (*SiteFaq)(nil)

func (comp *SiteFaq) BuildVDOM(dataI interface{}) (vdom *vugu.VGNode, css *vugu.VGNode, reterr error) {
	data := dataI.(*SiteFaqData)
	_ = data
	_ = fmt.Sprint
	_ = reflect.Value{}
	event := vugu.DOMEventStub
	_ = event
	var n *vugu.VGNode
	n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "section", DataAtom: vugu.VGAtom(354311), Namespace: "", Attr: []vugu.VGAttribute(nil)}
	vdom = n
	{
		parent := n
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " hero ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "section", DataAtom: vugu.VGAtom(354311), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-0 pt-3"}}}
		parent.AppendChild(n)
		{
			parent := n
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
			n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " <div class=\"image image-gradient-vertical\" style=\"background-image:url(../../assets/images/image.jpg)\"></div> ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
			n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "container"}}}
			parent.AppendChild(n)
			{
				parent := n
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
				n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "row justify-content-center"}}}
				parent.AppendChild(n)
				{
					parent := n
					n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
					parent.AppendChild(n)
					n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col"}}}
					parent.AppendChild(n)
					{
						parent := n
						n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
						n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h1", DataAtom: vugu.VGAtom(89090), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mb-3"}}}
						parent.AppendChild(n)
						{
							parent := n
							n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "FAQ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
							parent.AppendChild(n)
						}
						n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
					}
					n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
					parent.AppendChild(n)
				}
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
			}
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " / hero ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " accordions ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "section", DataAtom: vugu.VGAtom(354311), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "pb-3"}}}
		parent.AppendChild(n)
		{
			parent := n
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
			n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "container"}}}
			parent.AppendChild(n)
			{
				parent := n
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
				n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "row justify-content-center"}}}
				parent.AppendChild(n)
				{
					parent := n
					n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
					parent.AppendChild(n)
					n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col"}}}
					parent.AppendChild(n)
					{
						parent := n
						n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
						n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "accordion accordion-fluid"}, vugu.VGAttribute{Namespace: "", Key: "id", Val: "accordion-1"}}}
						parent.AppendChild(n)
						{
							parent := n
							n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
							parent.AppendChild(n)
							n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "card"}}}
							parent.AppendChild(n)
							{
								parent := n
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "card-header"}, vugu.VGAttribute{Namespace: "", Key: "id", Val: "heading-1-1"}}}
								parent.AppendChild(n)
								{
									parent := n
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h5", DataAtom: vugu.VGAtom(216834), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mb-0"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "button", DataAtom: vugu.VGAtom(102662), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "btn btn-link"}, vugu.VGAttribute{Namespace: "", Key: "type", Val: "button"}, vugu.VGAttribute{Namespace: "", Key: "id", Val: "browser-support"}}}
										parent.AppendChild(n)
										// @click = { data.HandleClick("browser-support") }
										{
											var i_ interface{} = data
											idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
											var i2_ interface{} = data.HandleClick
											i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
											n.SetDOMEventHandler("click", vugu.DOMEventHandler{
												ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
												Method:                reflect.ValueOf(data).MethodByName("HandleClick"),
												Args:                  []interface{}{"browser-support"},
											})
										}
										if false {
											// force compiler to check arguments for type safety
											data.HandleClick("browser-support")
										}
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        What browers does this work in?\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if data.SelectedID == "browser-support" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "card-body"}}}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Recent versions of Chrome, Firefox and Microsft Edge support WebAssembly and have\n                                        been tested with basic Vugu functionality.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Any browser that supports WebAssembly and is targetable by the Go compiler should\n                                        work.\n                                        Mobile browser support is not yet well tested but moving forward the Vugu\n                                        project is intended to support mobile\n                                        to the extent that WebAssembly is.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: "\n                            <div class=\"card-header\" id=\"heading-1-1\">\n                              <h5 class=\"mb-0\">\n                                <button class=\"btn btn-link\" type=\"button\" id=\"how-does-it-work\" @click='data.HandleClick(\"how-does-it-work\")'>\n                                    In a nutshell, how does Vugu work?\n                                </button>\n                              </h5>\n                            </div>\n                            <div vg-if='data.SelectedID==\"how-does-it-work\"'>\n                              <div class=\"card-body\">\n                                <p>\n                                    Vugu is a regular Go library that uses the <a target=\"_blank\" href=\"https://golang.org/pkg/syscall/js/\">syscall/js</a> package\n                                    to\n                                </p>\n                              </div>\n                            </div>\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "card-header"}, vugu.VGAttribute{Namespace: "", Key: "id", Val: "heading-1-1"}}}
								parent.AppendChild(n)
								{
									parent := n
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h5", DataAtom: vugu.VGAtom(216834), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mb-0"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "button", DataAtom: vugu.VGAtom(102662), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "btn btn-link"}, vugu.VGAttribute{Namespace: "", Key: "type", Val: "button"}, vugu.VGAttribute{Namespace: "", Key: "id", Val: "does-it-use-js"}}}
										parent.AppendChild(n)
										// @click = { data.HandleClick("does-it-use-js") }
										{
											var i_ interface{} = data
											idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
											var i2_ interface{} = data.HandleClick
											i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
											n.SetDOMEventHandler("click", vugu.DOMEventHandler{
												ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
												Method:                reflect.ValueOf(data).MethodByName("HandleClick"),
												Args:                  []interface{}{"does-it-use-js"},
											})
										}
										if false {
											// force compiler to check arguments for type safety
											data.HandleClick("does-it-use-js")
										}
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        Does this project use JavaScript at all?\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if data.SelectedID == "does-it-use-js" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "card-body"}}}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        Vugu files (.vugu) do not contain any JS at all, only Go code is allowed.\n                                        (Whether or not it's a good idea to support JS\n                                        in .vugu files in the future is open to debate.)\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        That said, access from a WebAssembly program to the Document Object Model does\n                                        require calls to JavaScript methods. Also, Go's WebAssembly\n                                        support currently requires wasm_exec.js to be loaded, a relatively small file\n                                        that provides some needed support and integration\n                                        for the Go runtime.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        But everything else is just Go code running as WebAssembly. For example when a\n                                        handler for a click is registered, Vugu will\n                                        call the appropriate ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "addEventListener", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " method on the DOM, but when\n                                        the event is fired the Go WASM runtime immediately\n                                        translates this call into a Go method call and everything else is Go from there.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "card-header"}, vugu.VGAttribute{Namespace: "", Key: "id", Val: "heading-1-1"}}}
								parent.AppendChild(n)
								{
									parent := n
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h5", DataAtom: vugu.VGAtom(216834), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mb-0"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "button", DataAtom: vugu.VGAtom(102662), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "btn btn-link"}, vugu.VGAttribute{Namespace: "", Key: "type", Val: "button"}, vugu.VGAttribute{Namespace: "", Key: "id", Val: "too-big-and-slow"}}}
										parent.AppendChild(n)
										// @click = { data.HandleClick("too-big-and-slow") }
										{
											var i_ interface{} = data
											idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
											var i2_ interface{} = data.HandleClick
											i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
											n.SetDOMEventHandler("click", vugu.DOMEventHandler{
												ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
												Method:                reflect.ValueOf(data).MethodByName("HandleClick"),
												Args:                  []interface{}{"too-big-and-slow"},
											})
										}
										if false {
											// force compiler to check arguments for type safety
											data.HandleClick("too-big-and-slow")
										}
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        Are the binaries too big? Is it slow?\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if data.SelectedID == "too-big-and-slow" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "card-body"}}}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        The binaries can be big, yes. However, they gzip better than one might expect\n                                        for a binary. The average\n                                        browser download of compressed content for a reasonably sized-program is several\n                                        megabytes.\n                                        For some use cases this is completely workable, others it's a problem.\n                                        Future improvements in size can be expected as the WebAssembly spec and Go's\n                                        support for it both evolve.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        The calls between the Go WebAssembly binary at the browser to access DOM are not\n                                        terribly fast.\n                                        Last I checked it was around ~75µs per call (although it might be faster calling\n                                        the same method over and over)\n                                        and while it tries to minimize those calls it does have\n                                        to do a lot of them when it builds out the DOM on the page. But so far,\n                                        overall UI speeds have generally been managable. For many applications speed\n                                        won't be a problem, and it will only get faster\n                                        as things improve.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "card-header"}, vugu.VGAttribute{Namespace: "", Key: "id", Val: "heading-1-1"}}}
								parent.AppendChild(n)
								{
									parent := n
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h5", DataAtom: vugu.VGAtom(216834), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mb-0"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "button", DataAtom: vugu.VGAtom(102662), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "btn btn-link"}, vugu.VGAttribute{Namespace: "", Key: "type", Val: "button"}, vugu.VGAttribute{Namespace: "", Key: "id", Val: "stability"}}}
										parent.AppendChild(n)
										// @click = { data.HandleClick("stability") }
										{
											var i_ interface{} = data
											idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
											var i2_ interface{} = data.HandleClick
											i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
											n.SetDOMEventHandler("click", vugu.DOMEventHandler{
												ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
												Method:                reflect.ValueOf(data).MethodByName("HandleClick"),
												Args:                  []interface{}{"stability"},
											})
										}
										if false {
											// force compiler to check arguments for type safety
											data.HandleClick("stability")
										}
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        What is the stability of the API of Vugu? What compatibility issues can I\n                                        expect?\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if data.SelectedID == "stability" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "card-body"}}}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "For now, ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "everything is experimental", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ".", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        Vugu uses ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://github.com/golang/go/wiki/Modules"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Go\n                                            Modules", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        which helps give developers expectations on API compatibility. No release date\n                                        is set for Vugu 1.0, so\n                                        if you need some guarantee of API stability you can lock to a specific\n                                        development version.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://github.com/golang/go/wiki/WebAssembly"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "WebAssembly\n                                            support in Go", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " itself is also currently experimental and breaking changes\n                                        may arrive with each new release.\n                                        We'll do our best to update Vugu following Go releases as quickly as possible.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        Once WebAssembly is no longer experimental in Go, and\n                                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://webassembly.org/docs/future-features/"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "more\n                                            mature in general", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ", Vugu 1.0 will probably be released at that time.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "card-header"}, vugu.VGAttribute{Namespace: "", Key: "id", Val: "heading-1-1"}}}
								parent.AppendChild(n)
								{
									parent := n
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h5", DataAtom: vugu.VGAtom(216834), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mb-0"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "button", DataAtom: vugu.VGAtom(102662), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "btn btn-link"}, vugu.VGAttribute{Namespace: "", Key: "type", Val: "button"}, vugu.VGAttribute{Namespace: "", Key: "id", Val: "why-u-no-use-templates"}}}
										parent.AppendChild(n)
										// @click = { data.HandleClick("why-u-no-use-templates") }
										{
											var i_ interface{} = data
											idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
											var i2_ interface{} = data.HandleClick
											i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
											n.SetDOMEventHandler("click", vugu.DOMEventHandler{
												ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
												Method:                reflect.ValueOf(data).MethodByName("HandleClick"),
												Args:                  []interface{}{"why-u-no-use-templates"},
											})
										}
										if false {
											// force compiler to check arguments for type safety
											data.HandleClick("why-u-no-use-templates")
										}
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        Why doesn't Vugu use Go templates (html/template)?\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if data.SelectedID == "why-u-no-use-templates" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "card-body"}}}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Short answer: Because ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "templates do not provide type safety", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " or\n                                        other compile-time checks.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        This was a major decision in Vugu's overall design and was not made lightly.\n                                        There are certainly arguments in favor\n                                        of using templates, such as the fact that some expressions are shorter to\n                                        represent and easier to understand. Templates\n                                        also can be evaluated at runtime and do not require a Go compiler.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        This is contrasted by the fact that one of the major drawbacks to building a\n                                        large user interface in JS is the\n                                        lack of type safety and other compile-time checks. The TypeScript people\n                                        invented a whole new language to address the problem.\n                                        The larger\n                                        the code base, the more you need types and a compiler. Modern UIs can be very\n                                        sophisticated and Vugu intends\n                                        to support complex projects well. To do that, we need to leverage the Go\n                                        compiler, which means that templates have\n                                        Go expressions in them, not template code.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        That said, it is entirely possibly that template support will be added to Vugu\n                                        as an additional feature.\n                                        It's also possible for a fully-templated implementation of\n                                        components to be made (after all, ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://godoc.org/github.com/vugu/vugu#ComponentType"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "ComponentType", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        is just an interface,\n                                        and anything that can generate virtual DOM and instantiate some data can be a\n                                        component);\n                                        this could potentially be of use for components that are loaded dynamically at\n                                        runtime. These ideas certainly warrant\n                                        further discussion and exploration.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "card-header"}, vugu.VGAttribute{Namespace: "", Key: "id", Val: "heading-1-1"}}}
								parent.AppendChild(n)
								{
									parent := n
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h5", DataAtom: vugu.VGAtom(216834), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mb-0"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "button", DataAtom: vugu.VGAtom(102662), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "btn btn-link"}, vugu.VGAttribute{Namespace: "", Key: "type", Val: "button"}, vugu.VGAttribute{Namespace: "", Key: "id", Val: "roadmap"}}}
										parent.AppendChild(n)
										// @click = { data.HandleClick("roadmap") }
										{
											var i_ interface{} = data
											idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
											var i2_ interface{} = data.HandleClick
											i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
											n.SetDOMEventHandler("click", vugu.DOMEventHandler{
												ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
												Method:                reflect.ValueOf(data).MethodByName("HandleClick"),
												Args:                  []interface{}{"roadmap"},
											})
										}
										if false {
											// force compiler to check arguments for type safety
											data.HandleClick("roadmap")
										}
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        Where is this project headed? What are the plans for its future?\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if data.SelectedID == "roadmap" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "card-body"}}}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "The intention is to provide feature parity with Vue and React.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        A lot of the basic functionality for templates, components and DOM events is\n                                        already working well.\n                                        See the ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "target", Val: "_blank"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://github.com/vugu/vugu/blob/master/README.md"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "GitHub\n                                            Readme", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " for the roadmap.\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        Some features don't translate well (like data binding), but still, the idea is\n                                        that by the time we\n                                        get to 1.0 \"pretty much anything you can do in Vue, you can do in Vugu\".\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "card-header"}, vugu.VGAttribute{Namespace: "", Key: "id", Val: "heading-1-1"}}}
								parent.AppendChild(n)
								{
									parent := n
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "h5", DataAtom: vugu.VGAtom(216834), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mb-0"}}}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "button", DataAtom: vugu.VGAtom(102662), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "btn btn-link"}, vugu.VGAttribute{Namespace: "", Key: "type", Val: "button"}, vugu.VGAttribute{Namespace: "", Key: "id", Val: "can-i-just-go-build"}}}
										parent.AppendChild(n)
										// @click = { data.HandleClick("can-i-just-go-build") }
										{
											var i_ interface{} = data
											idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
											var i2_ interface{} = data.HandleClick
											i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
											n.SetDOMEventHandler("click", vugu.DOMEventHandler{
												ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
												Method:                reflect.ValueOf(data).MethodByName("HandleClick"),
												Args:                  []interface{}{"can-i-just-go-build"},
											})
										}
										if false {
											// force compiler to check arguments for type safety
											data.HandleClick("can-i-just-go-build")
										}
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                        Can I just \"go build\" my project?\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
									n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								if data.SelectedID == "can-i-just-go-build" {
									n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
									parent.AppendChild(n)
									{
										parent := n
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
										n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "card-body"}}}
										parent.AppendChild(n)
										{
											parent := n
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "You'll also need to use ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "go generate", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " with ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "code", DataAtom: vugu.VGAtom(378116), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "vugugen", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " to\n                                        convert your your .vugu files to .go before building.\n                                        But otherwise, ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "yes", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: ", no special build tools are required.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "However, for convenience, there is a development webserver (implements the\n                                        standard http.Handler)\n                                        which can be used to rapidly prototype new projects and takes care of building\n                                        your project to a .wasm file on the fly and serving\n                                        it to the browser.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
											{
												parent := n
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Read more in the ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
												n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "a", DataAtom: vugu.VGAtom(1), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "href", Val: "/doc/build-and-dist"}}}
												parent.AppendChild(n)
												{
													parent := n
													n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Build and Dist", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
													parent.AppendChild(n)
												}
												n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: " section.", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
												parent.AppendChild(n)
											}
											n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
											parent.AppendChild(n)
										}
										n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
										parent.AppendChild(n)
									}
								}
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: "\n                            <div class=\"card-header\" id=\"heading-1-1\">\n                              <h5 class=\"mb-0\">\n                                <button class=\"btn btn-link\" type=\"button\" id=\"add-css-files\" @click='data.HandleClick(\"add-css-files\")'>\n                                    How do I quickly add some CSS files to be included on every page?\n                                </button>\n                              </h5>\n                            </div>\n                            <div vg-if='data.SelectedID==\"add-css-files\"'>\n                              <div class=\"card-body\">\n                                <p>\n                                  Assuming you are using simplehttp, the easy way to do this is to go into your devserver.go or server.go\n                                  and add a block like this:</p>\n\n            <div vg-html='showCode(\"go\",`simplehttp.DefaultStaticData[\"CSSFiles\"] = []string{\n              \"/path/to/file1.css\",\n              \"/path/to/file2.css\",\n              // ...\n            }`)'></div>\n\n                                <p>The default setup will loop over those paths (in sequence) and add the appropriate <code><link</code> tags to the <code><head></code> section of your page.</p>\n\n                              </div>\n                            </div>\n                            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
								n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n                        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
								parent.AppendChild(n)
							}
							n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
							parent.AppendChild(n)
						}
						n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
					}
					n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
					parent.AppendChild(n)
				}
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
			}
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " / accordions ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\n", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
	}
	return
}

type SiteFaq struct {}

func (ct *SiteFaq) NewData(props vugu.Props) (interface{}, error) { return &SiteFaqData{}, nil }

func init() { vugu.RegisterComponentType("site-faq", &SiteFaq{}) }
